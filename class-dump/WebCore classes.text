/*
 *     Generated by class-dump 3.3.1 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2009 by Steve Nygard.
 */

#pragma mark Named Structures

struct AccessibilityObject {
    void **_field1;
    int _field2;
    unsigned int _field3;
    struct Vector<WTF::RefPtr<WebCore::AccessibilityObject>, 0ul> _field4;
    _Bool _field5;
    struct RetainPtr<AccessibilityObjectWrapper> _field6;
};

struct AnimationController {
    struct AnimationControllerPrivate *_field1;
};

struct AnimationControllerPrivate;

struct AtomicString {
    struct String _field1;
};

struct CGImage;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CSSMutableStyleDeclaration;

struct Color {
    unsigned int m_color;
    _Bool m_valid;
};

struct CompositionUnderline;

struct ContextMenu;

struct ContextMenuClient;

struct ContextMenuController {
    struct Page *_field1;
    struct ContextMenuClient *_field2;
    struct OwnPtr<WebCore::ContextMenu> _field3;
};

struct Credential {
    struct String m_user;
    struct String m_password;
    int m_persistence;
};

struct DOMWindow;

struct DeleteButtonController;

struct Document;

struct DocumentLoader;

struct EditCommand;

struct Editor {
    struct Frame *_field1;
    struct OwnPtr<WebCore::DeleteButtonController> _field2;
    struct RefPtr<WebCore::EditCommand> _field3;
    struct RefPtr<WebCore::Node> _field4;
    struct RefPtr<WebCore::Text> _field5;
    unsigned int _field6;
    unsigned int _field7;
    struct Vector<WebCore::CompositionUnderline, 0ul> _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
};

struct EventHandler {
    struct Frame *_field1;
    _Bool _field2;
    _Bool _field3;
    struct RefPtr<WebCore::Node> _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    struct IntPoint _field9;
    struct IntPoint _field10;
    _Bool _field11;
    struct Timer<WebCore::EventHandler> _field12;
    struct Timer<WebCore::EventHandler> _field13;
    struct RenderObject *_field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    struct RefPtr<WebCore::SVGElementInstance> _field19;
    struct RefPtr<WebCore::SVGElementInstance> _field20;
    struct RenderLayer *_field21;
    struct RefPtr<WebCore::Node> _field22;
    struct RefPtr<WebCore::Node> _field23;
    struct RefPtr<WebCore::Node> _field24;
    struct RefPtr<WebCore::Frame> _field25;
    struct RefPtr<WebCore::Scrollbar> _field26;
    int _field27;
    struct RefPtr<WebCore::Node> _field28;
    struct RefPtr<WebCore::Node> _field29;
    struct RefPtr<WebCore::HTMLFrameSetElement> _field30;
    struct IntSize _field31;
    struct IntPoint _field32;
    struct IntPoint _field33;
    double _field34;
    struct PlatformMouseEvent _field35;
    _Bool _field36;
    struct RefPtr<WebCore::Node> _field37;
    _Bool _field38;
    struct RefPtr<WebCore::Node> _field39;
    id _field40;
    _Bool _field41;
    int _field42;
};

struct FloatPoint {
    float m_x;
    float m_y;
};

struct FloatPoint3D {
    float m_x;
    float m_y;
    float m_z;
};

struct FloatRect;

struct FloatSize {
    float m_width;
    float m_height;
};

struct FormData;

struct FormState;

struct Frame {
    int _field1;
    struct Page *_field2;
    struct FrameTree _field3;
    struct FrameLoader _field4;
    struct RefPtr<WebCore::DOMWindow> _field5;
    struct HashSet<WebCore::DOMWindow*, WTF::PtrHash<WebCore::DOMWindow*>, WTF::HashTraits<WebCore::DOMWindow*>> _field6;
    struct HTMLFrameOwnerElement *_field7;
    struct RefPtr<WebCore::FrameView> _field8;
    struct RefPtr<WebCore::Document> _field9;
    struct ScriptController _field10;
    struct String _field11;
    struct String _field12;
    float _field13;
    int _field14;
    struct SelectionController _field15;
    struct VisibleSelection _field16;
    struct Timer<WebCore::Frame> _field17;
    struct Editor _field18;
    struct EventHandler _field19;
    struct AnimationController _field20;
    struct RefPtr<WebCore::CSSMutableStyleDeclaration> _field21;
    struct Timer<WebCore::Frame> _field22;
    _Bool _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
    _Bool _field28;
    _Bool _field29;
    struct UserStyleSheetLoader *_field30;
};

struct FrameLoader {
    struct Frame *_field1;
    struct FrameLoaderClient *_field2;
    int _field3;
    int _field4;
    struct RefPtr<WebCore::DocumentLoader> _field5;
    struct RefPtr<WebCore::DocumentLoader> _field6;
    struct RefPtr<WebCore::DocumentLoader> _field7;
    int _field8;
    struct PolicyCheck _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    struct String _field17;
    _Bool _field18;
    _Bool _field19;
    struct String _field20;
    _Bool _field21;
    _Bool _field22;
    _Bool _field23;
    _Bool _field24;
    _Bool _field25;
    struct KURL _field26;
    struct KURL _field27;
    struct OwnPtr<WebCore::IconLoader> _field28;
    _Bool _field29;
    _Bool _field30;
    struct OwnPtr<WebCore::ScheduledRedirection> _field31;
    _Bool _field32;
    _Bool _field33;
    _Bool _field34;
    struct String _field35;
    struct RefPtr<WebCore::TextResourceDecoder> _field36;
    _Bool _field37;
    struct KURL _field38;
    struct Timer<WebCore::FrameLoader> _field39;
    struct Timer<WebCore::FrameLoader> _field40;
    struct Timer<WebCore::FrameLoader> _field41;
    struct Frame *_field42;
    struct HashSet<WebCore::Frame*, WTF::PtrHash<WebCore::Frame*>, WTF::HashTraits<WebCore::Frame*>> _field43;
    _Bool _field44;
    _Bool _field45;
    _Bool _field46;
    _Bool _field47;
    struct RefPtr<WebCore::HistoryItem> _field48;
    struct RefPtr<WebCore::HistoryItem> _field49;
    struct RefPtr<WebCore::HistoryItem> _field50;
    _Bool _field51;
};

struct FrameLoaderClient;

struct FrameTree {
    struct Frame *_field1;
    struct Frame *_field2;
    struct AtomicString _field3;
    struct RefPtr<WebCore::Frame> _field4;
    struct Frame *_field5;
    struct RefPtr<WebCore::Frame> _field6;
    struct Frame *_field7;
    unsigned int _field8;
};

struct FrameView;

struct GraphicsLayer {
    void **_field1;
    struct GraphicsLayerClient *_field2;
    struct String _field3;
    struct IntSize _field4;
    struct FloatPoint _field5;
    struct FloatPoint3D _field6;
    struct FloatSize _field7;
    struct TransformationMatrix _field8;
    struct TransformationMatrix _field9;
    struct Color _field10;
    float _field11;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    int _field12;
    int _field13;
    int _field14;
    struct Vector<WebCore::GraphicsLayer*, 0ul> _field15;
    struct GraphicsLayer *_field16;
    struct IntRect _field17;
};

struct GraphicsLayerCA {
    void **_field1;
    struct GraphicsLayerClient *_field2;
    struct String _field3;
    struct IntSize _field4;
    struct FloatPoint _field5;
    struct FloatPoint3D _field6;
    struct FloatSize _field7;
    struct TransformationMatrix _field8;
    struct TransformationMatrix _field9;
    struct Color _field10;
    float _field11;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    int _field12;
    int _field13;
    int _field14;
    struct Vector<WebCore::GraphicsLayer*, 0ul> _field15;
    struct GraphicsLayer *_field16;
    struct IntRect _field17;
    struct RetainPtr<WebLayer> _field18;
    struct RetainPtr<WebLayer> _field19;
    struct RetainPtr<CALayer> _field20;
    int _field21;
    unsigned int :1;
    struct RetainPtr<WebAnimationDelegate> _field22;
    struct RetainPtr<CGImage*> _field23;
    struct Vector<WebCore::GraphicsLayerCA::LayerAnimation, 0ul> _field24;
    struct HashSet<int, WTF::IntHash<unsigned int>, WTF::HashTraits<int>> _field25;
    struct HashMap<WebCore::String, int, WebCore::StringHash, WTF::HashTraits<WebCore::String>, WTF::HashTraits<int>> _field26;
    struct HashMap<WebCore::String, WTF::Vector<std::pair<int, int>, 0ul>, WebCore::StringHash, WTF::HashTraits<WebCore::String>, WTF::HashTraits<WTF::Vector<std::pair<int, int>, 0ul>>> _field27;
    struct Vector<WebCore::FloatRect, 0ul> _field28;
    unsigned int _field29;
};

struct GraphicsLayerClient;

struct HTMLFrameOwnerElement;

struct HTMLFrameSetElement;

struct HTTPHeaderMap {
    struct HashTable<WebCore::AtomicString, std::pair<WebCore::AtomicString, WebCore::String>, WTF::PairFirstExtractor<std::pair<WebCore::AtomicString, WebCore::String>>, WebCore::CaseFoldingHash, WTF::PairHashTraits<WTF::HashTraits<WebCore::AtomicString>, WTF::HashTraits<WebCore::String>>, WTF::HashTraits<WebCore::AtomicString>> _field1;
};

struct HashCountedSet<JSC::JSObject*, WTF::PtrHash<JSC::JSObject*>, WTF::HashTraits<JSC::JSObject*>> {
    struct HashMap<JSC::JSObject*, unsigned int, WTF::PtrHash<JSC::JSObject*>, WTF::HashTraits<JSC::JSObject*>, WTF::HashTraits<unsigned int>> m_impl;
};

struct HashMap<JSC::JSObject*, unsigned int, WTF::PtrHash<JSC::JSObject*>, WTF::HashTraits<JSC::JSObject*>, WTF::HashTraits<unsigned int>> {
    struct HashTable<JSC::JSObject*, std::pair<JSC::JSObject*, unsigned int>, WTF::PairFirstExtractor<std::pair<JSC::JSObject*, unsigned int>>, WTF::PtrHash<JSC::JSObject*>, WTF::PairHashTraits<WTF::HashTraits<JSC::JSObject*>, WTF::HashTraits<unsigned int>>, WTF::HashTraits<JSC::JSObject*>> m_impl;
};

struct HashMap<WebCore::String, WTF::Vector<std::pair<int, int>, 0ul>, WebCore::StringHash, WTF::HashTraits<WebCore::String>, WTF::HashTraits<WTF::Vector<std::pair<int, int>, 0ul>>> {
    struct HashTable<WebCore::String, std::pair<WebCore::String, WTF::Vector<std::pair<int, int>, 0ul>>, WTF::PairFirstExtractor<std::pair<WebCore::String, WTF::Vector<std::pair<int, int>, 0ul>>>, WebCore::StringHash, WTF::PairHashTraits<WTF::HashTraits<WebCore::String>, WTF::HashTraits<WTF::Vector<std::pair<int, int>, 0ul>>>, WTF::HashTraits<WebCore::String>> m_impl;
};

struct HashMap<WebCore::String, int, WebCore::StringHash, WTF::HashTraits<WebCore::String>, WTF::HashTraits<int>> {
    struct HashTable<WebCore::String, std::pair<WebCore::String, int>, WTF::PairFirstExtractor<std::pair<WebCore::String, int>>, WebCore::StringHash, WTF::PairHashTraits<WTF::HashTraits<WebCore::String>, WTF::HashTraits<int>>, WTF::HashTraits<WebCore::String>> m_impl;
};

struct HashMap<void*, WTF::RefPtr<JSC::Bindings::RootObject>, WTF::PtrHash<void*>, WTF::HashTraits<void*>, WTF::HashTraits<WTF::RefPtr<JSC::Bindings::RootObject>>> {
    struct HashTable<void*, std::pair<void*, WTF::RefPtr<JSC::Bindings::RootObject>>, WTF::PairFirstExtractor<std::pair<void*, WTF::RefPtr<JSC::Bindings::RootObject>>>, WTF::PtrHash<void*>, WTF::PairHashTraits<WTF::HashTraits<void*>, WTF::HashTraits<WTF::RefPtr<JSC::Bindings::RootObject>>>, WTF::HashTraits<void*>> _field1;
};

struct HashSet<JSC::RuntimeObjectImp*, WTF::PtrHash<JSC::RuntimeObjectImp*>, WTF::HashTraits<JSC::RuntimeObjectImp*>> {
    struct HashTable<JSC::RuntimeObjectImp*, JSC::RuntimeObjectImp*, WTF::IdentityExtractor<JSC::RuntimeObjectImp*>, WTF::PtrHash<JSC::RuntimeObjectImp*>, WTF::HashTraits<JSC::RuntimeObjectImp*>, WTF::HashTraits<JSC::RuntimeObjectImp*>> m_impl;
};

struct HashSet<WebCore::DOMWindow*, WTF::PtrHash<WebCore::DOMWindow*>, WTF::HashTraits<WebCore::DOMWindow*>> {
    struct HashTable<WebCore::DOMWindow*, WebCore::DOMWindow*, WTF::IdentityExtractor<WebCore::DOMWindow*>, WTF::PtrHash<WebCore::DOMWindow*>, WTF::HashTraits<WebCore::DOMWindow*>, WTF::HashTraits<WebCore::DOMWindow*>> _field1;
};

struct HashSet<WebCore::Frame*, WTF::PtrHash<WebCore::Frame*>, WTF::HashTraits<WebCore::Frame*>> {
    struct HashTable<WebCore::Frame*, WebCore::Frame*, WTF::IdentityExtractor<WebCore::Frame*>, WTF::PtrHash<WebCore::Frame*>, WTF::HashTraits<WebCore::Frame*>, WTF::HashTraits<WebCore::Frame*>> _field1;
};

struct HashSet<int, WTF::IntHash<unsigned int>, WTF::HashTraits<int>> {
    struct HashTable<int, int, WTF::IdentityExtractor<int>, WTF::IntHash<unsigned int>, WTF::HashTraits<int>, WTF::HashTraits<int>> m_impl;
};

struct HashTable<JSC::JSObject*, std::pair<JSC::JSObject*, unsigned int>, WTF::PairFirstExtractor<std::pair<JSC::JSObject*, unsigned int>>, WTF::PtrHash<JSC::JSObject*>, WTF::PairHashTraits<WTF::HashTraits<JSC::JSObject*>, WTF::HashTraits<unsigned int>>, WTF::HashTraits<JSC::JSObject*>> {
    struct pair<JSC::JSObject*, unsigned int> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<JSC::RuntimeObjectImp*, JSC::RuntimeObjectImp*, WTF::IdentityExtractor<JSC::RuntimeObjectImp*>, WTF::PtrHash<JSC::RuntimeObjectImp*>, WTF::HashTraits<JSC::RuntimeObjectImp*>, WTF::HashTraits<JSC::RuntimeObjectImp*>> {
    struct RuntimeObjectImp **m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<WebCore::AtomicString, std::pair<WebCore::AtomicString, WebCore::String>, WTF::PairFirstExtractor<std::pair<WebCore::AtomicString, WebCore::String>>, WebCore::CaseFoldingHash, WTF::PairHashTraits<WTF::HashTraits<WebCore::AtomicString>, WTF::HashTraits<WebCore::String>>, WTF::HashTraits<WebCore::AtomicString>> {
    struct pair<WebCore::AtomicString, WebCore::String> *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
};

struct HashTable<WebCore::DOMWindow*, WebCore::DOMWindow*, WTF::IdentityExtractor<WebCore::DOMWindow*>, WTF::PtrHash<WebCore::DOMWindow*>, WTF::HashTraits<WebCore::DOMWindow*>, WTF::HashTraits<WebCore::DOMWindow*>> {
    struct DOMWindow **_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
};

struct HashTable<WebCore::Frame*, WebCore::Frame*, WTF::IdentityExtractor<WebCore::Frame*>, WTF::PtrHash<WebCore::Frame*>, WTF::HashTraits<WebCore::Frame*>, WTF::HashTraits<WebCore::Frame*>> {
    struct Frame **_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
};

struct HashTable<WebCore::String, std::pair<WebCore::String, WTF::Vector<std::pair<int, int>, 0ul>>, WTF::PairFirstExtractor<std::pair<WebCore::String, WTF::Vector<std::pair<int, int>, 0ul>>>, WebCore::StringHash, WTF::PairHashTraits<WTF::HashTraits<WebCore::String>, WTF::HashTraits<WTF::Vector<std::pair<int, int>, 0ul>>>, WTF::HashTraits<WebCore::String>> {
    struct pair<WebCore::String, WTF::Vector<std::pair<int, int>, 0ul>> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<WebCore::String, std::pair<WebCore::String, int>, WTF::PairFirstExtractor<std::pair<WebCore::String, int>>, WebCore::StringHash, WTF::PairHashTraits<WTF::HashTraits<WebCore::String>, WTF::HashTraits<int>>, WTF::HashTraits<WebCore::String>> {
    struct pair<WebCore::String, int> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<int, int, WTF::IdentityExtractor<int>, WTF::IntHash<unsigned int>, WTF::HashTraits<int>, WTF::HashTraits<int>> {
    int *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<void*, std::pair<void*, WTF::RefPtr<JSC::Bindings::RootObject>>, WTF::PairFirstExtractor<std::pair<void*, WTF::RefPtr<JSC::Bindings::RootObject>>>, WTF::PtrHash<void*>, WTF::PairHashTraits<WTF::HashTraits<void*>, WTF::HashTraits<WTF::RefPtr<JSC::Bindings::RootObject>>>, WTF::HashTraits<void*>> {
    struct pair<void*, WTF::RefPtr<JSC::Bindings::RootObject>> *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
};

struct HistoryItem;

struct IconLoader;

struct IntPoint {
    int m_x;
    int m_y;
};

struct IntRect {
    struct IntPoint m_location;
    struct IntSize m_size;
};

struct IntSize {
    int m_width;
    int m_height;
};

struct JSCell;

struct JSDOMWindowShell;

struct JSGlobalObject;

struct JSObject {
    void **_field1;
    struct Structure *_field2;
    union {
        void **m_externalStorage;
        void *m_inlineStorage[3];
    } _field3;
    struct RefPtr<JSC::Structure> _field4;
};

struct JSValue {
    struct JSCell *_field1;
};

struct KURL {
    struct String _field1;
    unsigned int :1;
    unsigned int :1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
};

struct LayerAnimation;

struct MediaPlayer;

struct NPObject;

struct Node;

struct OwnPtr<WebCore::ContextMenu> {
    struct ContextMenu *m_ptr;
};

struct OwnPtr<WebCore::DeleteButtonController> {
    struct DeleteButtonController *_field1;
};

struct OwnPtr<WebCore::IconLoader> {
    struct IconLoader *_field1;
};

struct OwnPtr<WebCore::PurgeableBuffer> {
    struct PurgeableBuffer *_field1;
};

struct OwnPtr<WebCore::ResourceHandleInternal> {
    struct ResourceHandleInternal *m_ptr;
};

struct OwnPtr<WebCore::ScheduledRedirection> {
    struct ScheduledRedirection *_field1;
};

struct OwnPtr<WebCore::XSSAuditor> {
    struct XSSAuditor *_field1;
};

struct Page;

struct PassRefPtr<JSC::Bindings::RootObject> {
    struct RootObject *_field1;
};

struct PlatformMouseEvent {
    struct IntPoint _field1;
    struct IntPoint _field2;
    int _field3;
    int _field4;
    int _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    double _field10;
    unsigned int _field11;
    int _field12;
};

struct PolicyCheck {
    struct ResourceRequest _field1;
    struct RefPtr<WebCore::FormState> _field2;
    struct String _field3;
    void *_field4;
    void *_field5;
    void *_field6;
    void *_field7;
};

struct Position {
    struct RefPtr<WebCore::Node> _field1;
    int _field2;
    unsigned int :2;
    unsigned int :1;
};

struct ProtectedPtr<JSC::JSGlobalObject> {
    struct JSGlobalObject *m_ptr;
};

struct ProtectedPtr<WebCore::JSDOMWindowShell> {
    struct JSDOMWindowShell *_field1;
};

struct PurgeableBuffer;

struct RefPtr<JSC::Bindings::RootObject> {
    struct RootObject *_field1;
};

struct RefPtr<JSC::Structure> {
    struct Structure *m_ptr;
};

struct RefPtr<WebCore::AccessibilityObject>;

struct RefPtr<WebCore::CSSMutableStyleDeclaration> {
    struct CSSMutableStyleDeclaration *_field1;
};

struct RefPtr<WebCore::DOMWindow> {
    struct DOMWindow *_field1;
};

struct RefPtr<WebCore::Document> {
    struct Document *_field1;
};

struct RefPtr<WebCore::DocumentLoader> {
    struct DocumentLoader *_field1;
};

struct RefPtr<WebCore::EditCommand> {
    struct EditCommand *_field1;
};

struct RefPtr<WebCore::FormData> {
    struct FormData *_field1;
};

struct RefPtr<WebCore::FormState> {
    struct FormState *_field1;
};

struct RefPtr<WebCore::Frame> {
    struct Frame *_field1;
};

struct RefPtr<WebCore::FrameView> {
    struct FrameView *_field1;
};

struct RefPtr<WebCore::HTMLFrameSetElement> {
    struct HTMLFrameSetElement *_field1;
};

struct RefPtr<WebCore::HistoryItem> {
    struct HistoryItem *_field1;
};

struct RefPtr<WebCore::Node> {
    struct Node *_field1;
};

struct RefPtr<WebCore::SVGElementInstance> {
    struct SVGElementInstance *_field1;
};

struct RefPtr<WebCore::Scrollbar> {
    struct Scrollbar *_field1;
};

struct RefPtr<WebCore::SharedBuffer> {
    struct SharedBuffer *m_ptr;
};

struct RefPtr<WebCore::StringImpl> {
    struct StringImpl *m_ptr;
};

struct RefPtr<WebCore::Text> {
    struct Text *_field1;
};

struct RefPtr<WebCore::TextResourceDecoder> {
    struct TextResourceDecoder *_field1;
};

struct RenderLayer;

struct RenderObject;

struct RenderTheme {
    void **_field1;
    int _field2;
    struct Color _field3;
    struct Color _field4;
    struct Color _field5;
    struct Color _field6;
    struct Color _field7;
    struct Color _field8;
    struct Color _field9;
    struct Color _field10;
    struct Theme *_field11;
};

struct ResourceHandle {
    int _field1;
    struct OwnPtr<WebCore::ResourceHandleInternal> _field2;
};

struct ResourceHandleInternal;

struct ResourceRequest {
    struct KURL _field1;
    int _field2;
    double _field3;
    struct KURL _field4;
    struct String _field5;
    struct HTTPHeaderMap _field6;
    struct Vector<WebCore::String, 0ul> _field7;
    struct RefPtr<WebCore::FormData> _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    struct RetainPtr<NSURLRequest> _field13;
};

struct RetainPtr<AccessibilityObjectWrapper> {
    AccessibilityObjectWrapper *m_ptr;
};

struct RetainPtr<CALayer> {
    CALayer *m_ptr;
};

struct RetainPtr<CGImage*> {
    struct CGImage *m_ptr;
};

struct RetainPtr<NSURLRequest> {
    id _field1;
};

struct RetainPtr<QTMovie> {
    QTMovie *m_ptr;
};

struct RetainPtr<QTMovieLayer> {
    QTMovieLayer *m_ptr;
};

struct RetainPtr<QTMovieView> {
    QTMovieView *m_ptr;
};

struct RetainPtr<QTVideoRendererWebKitOnly> {
    QTVideoRendererWebKitOnly *m_ptr;
};

struct RetainPtr<WebAnimationDelegate> {
    WebAnimationDelegate *m_ptr;
};

struct RetainPtr<WebCoreMovieObserver> {
    WebCoreMovieObserver *m_ptr;
};

struct RetainPtr<WebLayer> {
    WebLayer *m_ptr;
};

struct RetainPtr<WebScriptObject> {
    id _field1;
};

struct RetainPtr<const __CFData*> {
    struct __CFData *_field1;
};

struct RootObject {
    int _field1;
    _Bool _field2;
    void *_field3;
    struct ProtectedPtr<JSC::JSGlobalObject> _field4;
    struct HashCountedSet<JSC::JSObject*, WTF::PtrHash<JSC::JSObject*>, WTF::HashTraits<JSC::JSObject*>> _field5;
    struct HashSet<JSC::RuntimeObjectImp*, WTF::PtrHash<JSC::RuntimeObjectImp*>, WTF::HashTraits<JSC::RuntimeObjectImp*>> _field6;
};

struct RuntimeObjectImp;

struct SVGElementInstance;

struct ScheduledRedirection;

struct ScriptController {
    struct ProtectedPtr<WebCore::JSDOMWindowShell> _field1;
    struct Frame *_field2;
    int _field3;
    struct String *_field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    struct RefPtr<JSC::Bindings::RootObject> _field8;
    struct HashMap<void*, WTF::RefPtr<JSC::Bindings::RootObject>, WTF::PtrHash<void*>, WTF::HashTraits<void*>, WTF::HashTraits<WTF::RefPtr<JSC::Bindings::RootObject>>> _field9;
    struct NPObject *_field10;
    struct RetainPtr<WebScriptObject> _field11;
    struct OwnPtr<WebCore::XSSAuditor> _field12;
};

struct Scrollbar;

struct SelectionController {
    struct Frame *_field1;
    int _field2;
    struct VisibleSelection _field3;
    struct IntRect _field4;
    struct IntRect _field5;
    struct IntRect _field6;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct SharedBuffer {
    int _field1;
    struct Vector<char, 0ul> _field2;
    struct OwnPtr<WebCore::PurgeableBuffer> _field3;
    struct RetainPtr<const __CFData*> _field4;
};

struct String {
    struct RefPtr<WebCore::StringImpl> m_impl;
};

struct StringImpl;

struct Structure;

struct Text;

struct TextResourceDecoder;

struct Theme;

struct Timer<WebCore::EventHandler> {
    void **_field1;
    double _field2;
    double _field3;
    int _field4;
    unsigned int _field5;
    struct EventHandler *_field6;
    CDStruct_d65495c1 _field7;
};

struct Timer<WebCore::Frame> {
    void **_field1;
    double _field2;
    double _field3;
    int _field4;
    unsigned int _field5;
    struct Frame *_field6;
    CDStruct_d65495c1 _field7;
};

struct Timer<WebCore::FrameLoader> {
    void **_field1;
    double _field2;
    double _field3;
    int _field4;
    unsigned int _field5;
    struct FrameLoader *_field6;
    CDStruct_d65495c1 _field7;
};

struct TransformationMatrix {
    double m_matrix[4][4];
};

struct UserStyleSheetLoader;

struct Vector<WTF::RefPtr<WebCore::AccessibilityObject>, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<WTF::RefPtr<WebCore::AccessibilityObject>, 0ul> m_buffer;
};

struct Vector<WebCore::CompositionUnderline, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<WebCore::CompositionUnderline, 0ul> _field2;
};

struct Vector<WebCore::FloatRect, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<WebCore::FloatRect, 0ul> m_buffer;
};

struct Vector<WebCore::GraphicsLayer*, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<WebCore::GraphicsLayer*, 0ul> m_buffer;
};

struct Vector<WebCore::GraphicsLayerCA::LayerAnimation, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<WebCore::GraphicsLayerCA::LayerAnimation, 0ul> m_buffer;
};

struct Vector<WebCore::String, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<WebCore::String, 0ul> _field2;
};

struct Vector<char, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<char, 0ul> _field2;
};

struct Vector<unsigned int, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<unsigned int, 0ul> _field2;
};

struct VectorBuffer<WTF::RefPtr<WebCore::AccessibilityObject>, 0ul> {
    struct RefPtr<WebCore::AccessibilityObject> *m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<WebCore::CompositionUnderline, 0ul> {
    struct CompositionUnderline *_field1;
    unsigned long long _field2;
};

struct VectorBuffer<WebCore::FloatRect, 0ul> {
    struct FloatRect *m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<WebCore::GraphicsLayer*, 0ul> {
    struct GraphicsLayer **m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<WebCore::GraphicsLayerCA::LayerAnimation, 0ul> {
    struct LayerAnimation *m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<WebCore::String, 0ul> {
    struct String *_field1;
    unsigned long long _field2;
};

struct VectorBuffer<char, 0ul> {
    char *_field1;
    unsigned long long _field2;
};

struct VectorBuffer<unsigned int, 0ul> {
    unsigned int *_field1;
    unsigned long long _field2;
};

struct VisiblePosition {
    struct Position _field1;
    int _field2;
};

struct VisiblePositionRange {
    struct VisiblePosition _field1;
    struct VisiblePosition _field2;
};

struct VisibleSelection {
    struct Position _field1;
    struct Position _field2;
    struct Position _field3;
    struct Position _field4;
    int _field5;
    int _field6;
    int _field7;
    _Bool _field8;
};

struct XSSAuditor;

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct pair<JSC::JSObject*, unsigned int>;

struct pair<WebCore::AtomicString, WebCore::String>;

struct pair<WebCore::String, WTF::Vector<std::pair<int, int>, 0ul>>;

struct pair<WebCore::String, int>;

struct pair<void*, WTF::RefPtr<JSC::Bindings::RootObject>>;

#if 0
// Names with conflicting types:
typedef struct ?<WebCore::MediaPlayerPrivate> {
    void **_field1;
    double _field2;
    double _field3;
    int _field4;
    unsigned int _field5;
    struct MediaPlayerPrivate *_field6;
    CDStruct_d65495c1 _field7;
} Timer_aa015a65;

typedef struct ?<WebCore::MediaPlayerPrivate> {
    void **_vptr$TimerBase;
    double m_nextFireTime;
    double m_repeatInterval;
    int m_heapIndex;
    unsigned int m_heapInsertionOrder;
    struct MediaPlayerPrivate *m_object;
    struct {
        void *__pfn;
        long long __delta;
    } m_function;
} Timer_78f4896c;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    long long *_field1;
} CDStruct_d65495c1;

// Template types
typedef struct PassRefPtr<JSC::Bindings::RootObject> {
    struct RootObject *_field1;
} PassRefPtr_8e019d1c;

typedef struct Vector<unsigned int, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<unsigned int, 0ul> _field2;
} Vector_c63bd660;

#pragma mark -

/*
 * File: /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore
 * Arch: Intel x86-64 (x86_64)
 *       Current version: 531.22.7, Compatibility version: 1.0.0
 *
 *       Objective-C Garbage Collection: Supported
 */

@protocol DOMElementTimeControl <NSObject>
- (BOOL)beginElement;
- (BOOL)beginElementAt:(float)arg1;
- (BOOL)endElement;
- (BOOL)endElementAt:(float)arg1;
@end

@protocol DOMEventTarget <NSObject, NSCopying>
- (void)addEventListener:(id)arg1 listener:(id)arg2 useCapture:(BOOL)arg3;
- (void)removeEventListener:(id)arg1 listener:(id)arg2 useCapture:(BOOL)arg3;
- (BOOL)dispatchEvent:(id)arg1;
- (void)addEventListener:(id)arg1:(id)arg2:(BOOL)arg3;
- (void)removeEventListener:(id)arg1:(id)arg2:(BOOL)arg3;
@end

@protocol DOMNodeFilter <NSObject>
- (short)acceptNode:(id)arg1;
@end

@protocol DOMSVGAnimatedPathData <NSObject>
@property(readonly, retain) DOMSVGPathSegList *animatedNormalizedPathSegList;
@property(readonly, retain) DOMSVGPathSegList *animatedPathSegList;
@property(readonly, retain) DOMSVGPathSegList *normalizedPathSegList;
@property(readonly, retain) DOMSVGPathSegList *pathSegList;
@end

@protocol DOMSVGAnimatedPoints <NSObject>
@property(readonly, retain) DOMSVGPointList *animatedPoints;
@property(readonly, retain) DOMSVGPointList *points;
@end

@protocol DOMSVGExternalResourcesRequired <NSObject>
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@end

@protocol DOMSVGFitToViewBox <NSObject>
@property(readonly, retain) DOMSVGAnimatedPreserveAspectRatio *preserveAspectRatio;
@property(readonly, retain) DOMSVGAnimatedRect *viewBox;
@end

@protocol DOMSVGLangSpace <NSObject>
@property(copy) NSString *xmlspace;
@property(copy) NSString *xmllang;
@end

@protocol DOMSVGLocatable <NSObject>
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@end

@protocol DOMSVGStylable <NSObject>
- (id)getPresentationAttribute:(id)arg1;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedString *className;
@end

@protocol DOMSVGTests <NSObject>
- (BOOL)hasExtension:(id)arg1;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@end

@protocol DOMSVGTransformable <DOMSVGLocatable>
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@end

@protocol DOMSVGURIReference <NSObject>
@property(readonly, retain) DOMSVGAnimatedString *href;
@end

@protocol DOMSVGZoomAndPan <NSObject>
@property unsigned short zoomAndPan;
@end

@protocol DOMXPathNSResolver <NSObject>
- (id)lookupNamespaceURI:(id)arg1;
@end

@protocol NSCoding
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (Class)superclass;
- (Class)class;
- (id)self;
- (struct _NSZone *)zone;
- (id)performSelector:(SEL)arg1;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (BOOL)isProxy;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)respondsToSelector:(SEL)arg1;
- (id)retain;
- (oneway void)release;
- (id)autorelease;
- (unsigned long long)retainCount;
- (id)description;
@end

@protocol NSURLAuthenticationChallengeSender <NSObject>
- (void)useCredential:(id)arg1 forAuthenticationChallenge:(id)arg2;
- (void)continueWithoutCredentialForAuthenticationChallenge:(id)arg1;
- (void)cancelAuthenticationChallenge:(id)arg1;
@end

@protocol WebCoreFrameScrollView
- (void)setScrollingModes:(int)arg1 vertical:(int)arg2 andLock:(BOOL)arg3;
- (void)scrollingModes:(int *)arg1 vertical:(int *)arg2;
- (void)setScrollBarsSuppressed:(BOOL)arg1 repaintOnUnsuppress:(BOOL)arg2;
@end

@protocol WebCoreFrameView
- (struct Frame *)_web_frame;
@end

@interface WebCoreMenuTarget : NSObject
{
    struct ContextMenuController *_menuController;
}

+ (id)sharedMenuTarget;
- (struct ContextMenuController *)menuController;
- (void)setMenuController:(struct ContextMenuController *)arg1;
- (void)forwardContextMenuAction:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;

@end

@interface WebCoreCursorBundle : NSObject
{
}

@end

@interface DOMNodeFilter : DOMObject <DOMNodeFilter>
{
}

- (void)dealloc;
- (void)finalize;
- (short)acceptNode:(id)arg1;

@end

@interface DOMAbstractView : DOMObject
{
}

- (void)dealloc;
@property(readonly, retain) DOMDocument *document;

@end

@interface DOMAttr : DOMNode
{
}

@property(readonly, copy) NSString *name;
@property(readonly) BOOL specified;
@property(copy) NSString *value;
@property(readonly, retain) DOMElement *ownerElement;
@property(readonly, retain) DOMCSSStyleDeclaration *style;

@end

@interface DOMCDATASection : DOMText
{
}

@end

@interface DOMCSSCharsetRule : DOMCSSRule
{
}

@property(readonly, copy) NSString *encoding;

@end

@interface DOMCSSFontFaceRule : DOMCSSRule
{
}

@property(readonly, retain) DOMCSSStyleDeclaration *style;

@end

@interface DOMCSSImportRule : DOMCSSRule
{
}

@property(readonly, copy) NSString *href;
@property(readonly, retain) DOMMediaList *media;
@property(readonly, retain) DOMCSSStyleSheet *styleSheet;

@end

@interface DOMCSSMediaRule : DOMCSSRule
{
}

@property(readonly, retain) DOMMediaList *media;
@property(readonly, retain) DOMCSSRuleList *cssRules;
- (unsigned int)insertRule:(id)arg1 index:(unsigned int)arg2;
- (unsigned int)insertRule:(id)arg1:(unsigned int)arg2;
- (void)deleteRule:(unsigned int)arg1;

@end

@interface DOMCSSPageRule : DOMCSSRule
{
}

@property(copy) NSString *selectorText;
@property(readonly, retain) DOMCSSStyleDeclaration *style;

@end

@interface DOMCSSPrimitiveValue : DOMCSSValue
{
}

@property(readonly) unsigned short primitiveType;
- (void)setFloatValue:(unsigned short)arg1 floatValue:(float)arg2;
- (void)setFloatValue:(unsigned short)arg1:(float)arg2;
- (float)getFloatValue:(unsigned short)arg1;
- (void)setStringValue:(unsigned short)arg1 stringValue:(id)arg2;
- (void)setStringValue:(unsigned short)arg1:(id)arg2;
- (id)getStringValue;
- (id)getCounterValue;
- (id)getRectValue;
- (id)getRGBColorValue;

@end

@interface DOMCSSRule : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned short type;
@property(copy) NSString *cssText;
@property(readonly, retain) DOMCSSStyleSheet *parentStyleSheet;
@property(readonly, retain) DOMCSSRule *parentRule;

@end

@interface DOMCSSRuleList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned int length;
- (id)item:(unsigned int)arg1;

@end

@interface DOMCSSStyleDeclaration : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(copy) NSString *cssText;
@property(readonly) unsigned int length;
@property(readonly, retain) DOMCSSRule *parentRule;
- (id)getPropertyValue:(id)arg1;
- (id)getPropertyCSSValue:(id)arg1;
- (id)removeProperty:(id)arg1;
- (id)getPropertyPriority:(id)arg1;
- (void)setProperty:(id)arg1 value:(id)arg2 priority:(id)arg3;
- (void)setProperty:(id)arg1:(id)arg2:(id)arg3;
- (id)item:(unsigned int)arg1;
- (id)getPropertyShorthand:(id)arg1;
- (BOOL)isPropertyImplicit:(id)arg1;

@end

@interface DOMCSSStyleRule : DOMCSSRule
{
}

@property(copy) NSString *selectorText;
@property(readonly, retain) DOMCSSStyleDeclaration *style;

@end

@interface DOMCSSStyleSheet : DOMStyleSheet
{
}

@property(readonly, retain) DOMCSSRule *ownerRule;
@property(readonly, retain) DOMCSSRuleList *cssRules;
@property(readonly, retain) DOMCSSRuleList *rules;
- (unsigned int)insertRule:(id)arg1 index:(unsigned int)arg2;
- (unsigned int)insertRule:(id)arg1:(unsigned int)arg2;
- (void)deleteRule:(unsigned int)arg1;
- (int)addRule:(id)arg1 style:(id)arg2 index:(unsigned int)arg3;
- (void)removeRule:(unsigned int)arg1;

@end

@interface DOMCSSUnknownRule : DOMCSSRule
{
}

@end

@interface DOMCSSValue : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(copy) NSString *cssText;
@property(readonly) unsigned short cssValueType;

@end

@interface DOMCSSValueList : DOMCSSValue
{
}

@property(readonly) unsigned int length;
- (id)item:(unsigned int)arg1;

@end

@interface DOMCSSVariablesDeclaration : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(copy) NSString *cssText;
@property(readonly) unsigned int length;
@property(readonly, retain) DOMCSSRule *parentRule;
- (id)getVariableValue:(id)arg1;
- (id)removeVariable:(id)arg1;
- (void)setVariable:(id)arg1 value:(id)arg2;
- (id)item:(unsigned int)arg1;

@end

@interface DOMCSSVariablesRule : DOMCSSRule
{
}

@property(readonly, retain) DOMMediaList *media;
@property(readonly, retain) DOMCSSVariablesDeclaration *variables;

@end

@interface DOMCharacterData : DOMNode
{
}

@property(copy) NSString *data;
@property(readonly) unsigned int length;
- (id)substringData:(unsigned int)arg1 length:(unsigned int)arg2;
- (id)substringData:(unsigned int)arg1:(unsigned int)arg2;
- (void)appendData:(id)arg1;
- (void)insertData:(unsigned int)arg1 data:(id)arg2;
- (void)insertData:(unsigned int)arg1:(id)arg2;
- (void)deleteData:(unsigned int)arg1 length:(unsigned int)arg2;
- (void)deleteData:(unsigned int)arg1:(unsigned int)arg2;
- (void)replaceData:(unsigned int)arg1 length:(unsigned int)arg2 data:(id)arg3;
- (void)replaceData:(unsigned int)arg1:(unsigned int)arg2:(id)arg3;

@end

@interface DOMComment : DOMCharacterData
{
}

@end

@interface DOMCounter : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, copy) NSString *identifier;
@property(readonly, copy) NSString *listStyle;
@property(readonly, copy) NSString *separator;

@end

@interface DOMImplementation : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
- (BOOL)hasFeature:(id)arg1 version:(id)arg2;
- (BOOL)hasFeature:(id)arg1:(id)arg2;
- (id)createDocumentType:(id)arg1 publicId:(id)arg2 systemId:(id)arg3;
- (id)createDocumentType:(id)arg1:(id)arg2:(id)arg3;
- (id)createDocument:(id)arg1 qualifiedName:(id)arg2 doctype:(id)arg3;
- (id)createDocument:(id)arg1:(id)arg2:(id)arg3;
- (id)createCSSStyleSheet:(id)arg1 media:(id)arg2;
- (id)createCSSStyleSheet:(id)arg1:(id)arg2;
- (id)createHTMLDocument:(id)arg1;

@end

@interface DOMDocument : DOMNode
{
}

@property(readonly, retain) DOMDocumentType *doctype;
@property(readonly, retain) DOMImplementation *implementation;
@property(readonly, retain) DOMElement *documentElement;
@property(readonly, copy) NSString *inputEncoding;
@property(readonly, copy) NSString *xmlEncoding;
@property(copy) NSString *xmlVersion;
@property BOOL xmlStandalone;
@property(copy) NSString *documentURI;
@property(readonly, retain) DOMAbstractView *defaultView;
@property(readonly, retain) DOMStyleSheetList *styleSheets;
@property(copy) NSString *title;
@property(readonly, copy) NSString *referrer;
@property(readonly, copy) NSString *domain;
@property(readonly, copy) NSString *URL;
@property(copy) NSString *cookie;
@property(retain) DOMHTMLElement *body;
@property(readonly, retain) DOMHTMLCollection *images;
@property(readonly, retain) DOMHTMLCollection *applets;
@property(readonly, retain) DOMHTMLCollection *links;
@property(readonly, retain) DOMHTMLCollection *forms;
@property(readonly, retain) DOMHTMLCollection *anchors;
@property(readonly, copy) NSString *lastModified;
@property(copy) NSString *charset;
@property(readonly, copy) NSString *defaultCharset;
@property(readonly, copy) NSString *readyState;
@property(readonly, copy) NSString *characterSet;
@property(readonly, copy) NSString *preferredStylesheetSet;
@property(copy) NSString *selectedStylesheetSet;
- (id)createElement:(id)arg1;
- (id)createDocumentFragment;
- (id)createTextNode:(id)arg1;
- (id)createComment:(id)arg1;
- (id)createCDATASection:(id)arg1;
- (id)createProcessingInstruction:(id)arg1 data:(id)arg2;
- (id)createProcessingInstruction:(id)arg1:(id)arg2;
- (id)createAttribute:(id)arg1;
- (id)createEntityReference:(id)arg1;
- (id)getElementsByTagName:(id)arg1;
- (id)importNode:(id)arg1 deep:(BOOL)arg2;
- (id)importNode:(id)arg1:(BOOL)arg2;
- (id)createElementNS:(id)arg1 qualifiedName:(id)arg2;
- (id)createElementNS:(id)arg1:(id)arg2;
- (id)createAttributeNS:(id)arg1 qualifiedName:(id)arg2;
- (id)createAttributeNS:(id)arg1:(id)arg2;
- (id)getElementsByTagNameNS:(id)arg1 localName:(id)arg2;
- (id)getElementsByTagNameNS:(id)arg1:(id)arg2;
- (id)getElementById:(id)arg1;
- (id)adoptNode:(id)arg1;
- (id)createEvent:(id)arg1;
- (id)createRange;
- (id)createNodeIterator:(id)arg1 whatToShow:(unsigned int)arg2 filter:(id)arg3 expandEntityReferences:(BOOL)arg4;
- (id)createNodeIterator:(id)arg1:(unsigned int)arg2:(id)arg3:(BOOL)arg4;
- (id)createTreeWalker:(id)arg1 whatToShow:(unsigned int)arg2 filter:(id)arg3 expandEntityReferences:(BOOL)arg4;
- (id)createTreeWalker:(id)arg1:(unsigned int)arg2:(id)arg3:(BOOL)arg4;
- (id)getOverrideStyle:(id)arg1 pseudoElement:(id)arg2;
- (id)getOverrideStyle:(id)arg1:(id)arg2;
- (id)createExpression:(id)arg1 resolver:(id)arg2;
- (id)createExpression:(id)arg1:(id)arg2;
- (id)createNSResolver:(id)arg1;
- (id)evaluate:(id)arg1 contextNode:(id)arg2 resolver:(id)arg3 type:(unsigned short)arg4 inResult:(id)arg5;
- (id)evaluate:(id)arg1:(id)arg2:(id)arg3:(unsigned short)arg4:(id)arg5;
- (BOOL)execCommand:(id)arg1 userInterface:(BOOL)arg2 value:(id)arg3;
- (BOOL)execCommand:(id)arg1 userInterface:(BOOL)arg2;
- (BOOL)execCommand:(id)arg1;
- (BOOL)queryCommandEnabled:(id)arg1;
- (BOOL)queryCommandIndeterm:(id)arg1;
- (BOOL)queryCommandState:(id)arg1;
- (BOOL)queryCommandSupported:(id)arg1;
- (id)queryCommandValue:(id)arg1;
- (id)getElementsByName:(id)arg1;
- (id)elementFromPoint:(int)arg1 y:(int)arg2;
- (id)createCSSStyleDeclaration;
- (id)getComputedStyle:(id)arg1 pseudoElement:(id)arg2;
- (id)getComputedStyle:(id)arg1:(id)arg2;
- (id)getMatchedCSSRules:(id)arg1 pseudoElement:(id)arg2;
- (id)getMatchedCSSRules:(id)arg1 pseudoElement:(id)arg2 authorOnly:(BOOL)arg3;
- (id)getElementsByClassName:(id)arg1;
- (id)querySelector:(id)arg1;
- (id)querySelectorAll:(id)arg1;

@end

@interface DOMDocumentFragment : DOMNode
{
}

- (id)querySelector:(id)arg1;
- (id)querySelectorAll:(id)arg1;

@end

@interface DOMDocumentType : DOMNode
{
}

@property(readonly, copy) NSString *name;
@property(readonly, retain) DOMNamedNodeMap *entities;
@property(readonly, retain) DOMNamedNodeMap *notations;
@property(readonly, copy) NSString *publicId;
@property(readonly, copy) NSString *systemId;
@property(readonly, copy) NSString *internalSubset;

@end

@interface DOMElement : DOMNode
{
}

@property(readonly, copy) NSString *tagName;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly) int offsetLeft;
@property(readonly) int offsetTop;
@property(readonly) int offsetWidth;
@property(readonly) int offsetHeight;
@property(readonly, retain) DOMElement *offsetParent;
@property(readonly) int clientLeft;
@property(readonly) int clientTop;
@property(readonly) int clientWidth;
@property(readonly) int clientHeight;
@property int scrollLeft;
@property int scrollTop;
@property(readonly) int scrollWidth;
@property(readonly) int scrollHeight;
@property(readonly, retain) DOMElement *firstElementChild;
@property(readonly, retain) DOMElement *lastElementChild;
@property(readonly, retain) DOMElement *previousElementSibling;
@property(readonly, retain) DOMElement *nextElementSibling;
@property(readonly) unsigned int childElementCount;
@property(readonly, copy) NSString *innerText;
- (id)getAttribute:(id)arg1;
- (void)setAttribute:(id)arg1 value:(id)arg2;
- (void)setAttribute:(id)arg1:(id)arg2;
- (void)removeAttribute:(id)arg1;
- (id)getAttributeNode:(id)arg1;
- (id)setAttributeNode:(id)arg1;
- (id)removeAttributeNode:(id)arg1;
- (id)getElementsByTagName:(id)arg1;
- (id)getAttributeNS:(id)arg1 localName:(id)arg2;
- (id)getAttributeNS:(id)arg1:(id)arg2;
- (void)setAttributeNS:(id)arg1 qualifiedName:(id)arg2 value:(id)arg3;
- (void)setAttributeNS:(id)arg1:(id)arg2:(id)arg3;
- (void)removeAttributeNS:(id)arg1 localName:(id)arg2;
- (void)removeAttributeNS:(id)arg1:(id)arg2;
- (id)getElementsByTagNameNS:(id)arg1 localName:(id)arg2;
- (id)getElementsByTagNameNS:(id)arg1:(id)arg2;
- (id)getAttributeNodeNS:(id)arg1 localName:(id)arg2;
- (id)getAttributeNodeNS:(id)arg1:(id)arg2;
- (id)setAttributeNodeNS:(id)arg1;
- (BOOL)hasAttribute:(id)arg1;
- (BOOL)hasAttributeNS:(id)arg1 localName:(id)arg2;
- (BOOL)hasAttributeNS:(id)arg1:(id)arg2;
- (void)focus;
- (void)blur;
- (void)scrollIntoView:(BOOL)arg1;
- (BOOL)contains:(id)arg1;
- (void)scrollIntoViewIfNeeded:(BOOL)arg1;
- (void)scrollByLines:(int)arg1;
- (void)scrollByPages:(int)arg1;
- (id)getElementsByClassName:(id)arg1;
- (id)querySelector:(id)arg1;
- (id)querySelectorAll:(id)arg1;

@end

@interface DOMEntity : DOMNode
{
}

@property(readonly, copy) NSString *publicId;
@property(readonly, copy) NSString *systemId;
@property(readonly, copy) NSString *notationName;

@end

@interface DOMEntityReference : DOMNode
{
}

@end

@interface DOMEvent : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, copy) NSString *type;
@property(readonly, retain) id <DOMEventTarget> target;
@property(readonly, retain) id <DOMEventTarget> currentTarget;
@property(readonly) unsigned short eventPhase;
@property(readonly) BOOL bubbles;
@property(readonly) BOOL cancelable;
@property(readonly) unsigned long long timeStamp;
@property(readonly, retain) id <DOMEventTarget> srcElement;
@property BOOL returnValue;
@property BOOL cancelBubble;
- (void)stopPropagation;
- (void)preventDefault;
- (void)initEvent:(id)arg1 canBubbleArg:(BOOL)arg2 cancelableArg:(BOOL)arg3;
- (void)initEvent:(id)arg1:(BOOL)arg2:(BOOL)arg3;

@end

@interface DOMFile : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, copy) NSString *fileName;
@property(readonly) unsigned long long fileSize;

@end

@interface DOMFileList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned int length;
- (id)item:(unsigned int)arg1;

@end

@interface DOMHTMLAnchorElement : DOMHTMLElement
{
}

@property(copy) NSString *accessKey;
@property(copy) NSString *charset;
@property(copy) NSString *coords;
@property(copy) NSString *href;
@property(copy) NSString *hreflang;
@property(copy) NSString *name;
@property(copy) NSString *rel;
@property(copy) NSString *rev;
@property(copy) NSString *shape;
@property(copy) NSString *target;
@property(copy) NSString *type;
@property(readonly, copy) NSString *hashName;
@property(readonly, copy) NSString *host;
@property(readonly, copy) NSString *hostname;
@property(readonly, copy) NSString *pathname;
@property(readonly, copy) NSString *port;
@property(readonly, copy) NSString *protocol;
@property(readonly, copy) NSString *search;
@property(readonly, copy) NSString *text;
@property(readonly, copy) NSURL *absoluteLinkURL;

@end

@interface DOMHTMLAppletElement : DOMHTMLElement
{
}

@property(copy) NSString *align;
@property(copy) NSString *alt;
@property(copy) NSString *archive;
@property(copy) NSString *code;
@property(copy) NSString *codeBase;
@property(copy) NSString *height;
@property int hspace;
@property(copy) NSString *name;
@property(copy) NSString *object;
@property int vspace;
@property(copy) NSString *width;

@end

@interface DOMHTMLAreaElement : DOMHTMLElement
{
}

@property(copy) NSString *accessKey;
@property(copy) NSString *alt;
@property(copy) NSString *coords;
@property(copy) NSString *href;
@property BOOL noHref;
@property(copy) NSString *shape;
@property(copy) NSString *target;
@property(readonly, copy) NSString *hashName;
@property(readonly, copy) NSString *host;
@property(readonly, copy) NSString *hostname;
@property(readonly, copy) NSString *pathname;
@property(readonly, copy) NSString *port;
@property(readonly, copy) NSString *protocol;
@property(readonly, copy) NSString *search;
@property(readonly, copy) NSURL *absoluteLinkURL;

@end

@interface DOMHTMLBRElement : DOMHTMLElement
{
}

@property(copy) NSString *clear;

@end

@interface DOMHTMLBaseElement : DOMHTMLElement
{
}

@property(copy) NSString *href;
@property(copy) NSString *target;

@end

@interface DOMHTMLBaseFontElement : DOMHTMLElement
{
}

@property(copy) NSString *color;
@property(copy) NSString *face;
@property(copy) NSString *size;

@end

@interface DOMHTMLBodyElement : DOMHTMLElement
{
}

@property(copy) NSString *aLink;
@property(copy) NSString *background;
@property(copy) NSString *bgColor;
@property(copy) NSString *link;
@property(copy) NSString *text;
@property(copy) NSString *vLink;

@end

@interface DOMHTMLButtonElement : DOMHTMLElement
{
}

@property(readonly, retain) DOMHTMLFormElement *form;
@property(copy) NSString *accessKey;
@property BOOL disabled;
@property BOOL autofocus;
@property(copy) NSString *name;
@property(readonly, copy) NSString *type;
@property(copy) NSString *value;
@property(readonly) BOOL willValidate;
- (void)click;

@end

@interface DOMHTMLCanvasElement : DOMHTMLElement
{
}

@property int width;
@property int height;
- (id)toDataURL:(id)arg1;

@end

@interface DOMHTMLCollection : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned int length;
- (id)item:(unsigned int)arg1;
- (id)namedItem:(id)arg1;
- (id)tags:(id)arg1;

@end

@interface DOMHTMLDListElement : DOMHTMLElement
{
}

@property BOOL compact;

@end

@interface DOMHTMLDirectoryElement : DOMHTMLElement
{
}

@property BOOL compact;

@end

@interface DOMHTMLDivElement : DOMHTMLElement
{
}

@property(copy) NSString *align;

@end

@interface DOMHTMLDocument : DOMDocument
{
}

@property(readonly, retain) DOMHTMLCollection *embeds;
@property(readonly, retain) DOMHTMLCollection *plugins;
@property(readonly, retain) DOMHTMLCollection *scripts;
@property(readonly) int width;
@property(readonly) int height;
@property(copy) NSString *dir;
@property(copy) NSString *designMode;
@property(readonly, copy) NSString *compatMode;
@property(readonly, retain) DOMElement *activeElement;
@property(copy) NSString *bgColor;
@property(copy) NSString *fgColor;
@property(copy) NSString *alinkColor;
@property(copy) NSString *linkColor;
@property(copy) NSString *vlinkColor;
- (void)open;
- (void)close;
- (void)write:(id)arg1;
- (void)writeln:(id)arg1;
- (void)clear;
- (void)captureEvents;
- (void)releaseEvents;
- (BOOL)hasFocus;

@end

@interface DOMHTMLElement : DOMElement
{
}

@property(copy) NSString *idName;
@property(copy) NSString *title;
@property(copy) NSString *lang;
@property(copy) NSString *dir;
@property(copy) NSString *className;
@property int tabIndex;
@property(copy) NSString *innerHTML;
@property(copy) NSString *innerText;
@property(copy) NSString *outerHTML;
@property(copy) NSString *outerText;
@property(readonly, retain) DOMHTMLCollection *children;
@property(copy) NSString *contentEditable;
@property(readonly) BOOL isContentEditable;
@property(readonly, copy) NSString *titleDisplayString;
- (id)insertAdjacentElement:(id)arg1 element:(id)arg2;
- (void)insertAdjacentHTML:(id)arg1 html:(id)arg2;
- (void)insertAdjacentText:(id)arg1 text:(id)arg2;

@end

@interface DOMHTMLEmbedElement : DOMHTMLElement
{
}

@property(copy) NSString *align;
@property int height;
@property(copy) NSString *name;
@property(copy) NSString *src;
@property(copy) NSString *type;
@property int width;
- (id)getSVGDocument;

@end

@interface DOMHTMLFieldSetElement : DOMHTMLElement
{
}

@property(readonly, retain) DOMHTMLFormElement *form;
- (BOOL)willValidate;

@end

@interface DOMHTMLFontElement : DOMHTMLElement
{
}

@property(copy) NSString *color;
@property(copy) NSString *face;
@property(copy) NSString *size;

@end

@interface DOMHTMLFormElement : DOMHTMLElement
{
}

@property(readonly, retain) DOMHTMLCollection *elements;
@property(readonly) int length;
@property(copy) NSString *name;
@property(copy) NSString *acceptCharset;
@property(copy) NSString *action;
@property(copy) NSString *encoding;
@property(copy) NSString *enctype;
@property(copy) NSString *method;
@property(copy) NSString *target;
- (void)submit;
- (void)reset;

@end

@interface DOMHTMLFrameElement : DOMHTMLElement
{
}

@property(copy) NSString *frameBorder;
@property(copy) NSString *longDesc;
@property(copy) NSString *marginHeight;
@property(copy) NSString *marginWidth;
@property(copy) NSString *name;
@property BOOL noResize;
@property(copy) NSString *scrolling;
@property(copy) NSString *src;
@property(readonly, retain) DOMDocument *contentDocument;
@property(readonly, retain) DOMAbstractView *contentWindow;
@property(copy) NSString *location;
@property(readonly) int width;
@property(readonly) int height;
- (id)getSVGDocument;

@end

@interface DOMHTMLFrameSetElement : DOMHTMLElement
{
}

@property(copy) NSString *cols;
@property(copy) NSString *rows;

@end

@interface DOMHTMLHRElement : DOMHTMLElement
{
}

@property(copy) NSString *align;
@property BOOL noShade;
@property(copy) NSString *size;
@property(copy) NSString *width;

@end

@interface DOMHTMLHeadElement : DOMHTMLElement
{
}

@property(copy) NSString *profile;

@end

@interface DOMHTMLHeadingElement : DOMHTMLElement
{
}

@property(copy) NSString *align;

@end

@interface DOMHTMLHtmlElement : DOMHTMLElement
{
}

@property(copy) NSString *version;

@end

@interface DOMHTMLIFrameElement : DOMHTMLElement
{
}

@property(copy) NSString *align;
@property(copy) NSString *frameBorder;
@property(copy) NSString *height;
@property(copy) NSString *longDesc;
@property(copy) NSString *marginHeight;
@property(copy) NSString *marginWidth;
@property(copy) NSString *name;
@property(copy) NSString *scrolling;
@property(copy) NSString *src;
@property(copy) NSString *width;
@property(readonly, retain) DOMDocument *contentDocument;
@property(readonly, retain) DOMAbstractView *contentWindow;
- (id)getSVGDocument;

@end

@interface DOMHTMLImageElement : DOMHTMLElement
{
}

@property(copy) NSString *name;
@property(copy) NSString *align;
@property(copy) NSString *alt;
@property(copy) NSString *border;
@property int height;
@property int hspace;
@property BOOL isMap;
@property(copy) NSString *longDesc;
@property(copy) NSString *src;
@property(copy) NSString *useMap;
@property int vspace;
@property int width;
@property(readonly) BOOL complete;
@property(copy) NSString *lowsrc;
@property(readonly) int naturalHeight;
@property(readonly) int naturalWidth;
@property(readonly) int x;
@property(readonly) int y;
@property(readonly, copy) NSString *altDisplayString;
@property(readonly, copy) NSURL *absoluteImageURL;

@end

@interface DOMHTMLInputElement : DOMHTMLElement
{
}

@property(copy) NSString *defaultValue;
@property BOOL defaultChecked;
@property(readonly, retain) DOMHTMLFormElement *form;
@property(copy) NSString *accept;
@property(copy) NSString *accessKey;
@property(copy) NSString *align;
@property(copy) NSString *alt;
@property BOOL checked;
@property BOOL disabled;
@property BOOL autofocus;
@property int maxLength;
@property BOOL multiple;
@property(copy) NSString *name;
- (id)placeholder;
- (void)setPlaceholder:(id)arg1;
@property BOOL readOnly;
@property(copy) NSString *size;
@property(copy) NSString *src;
@property(copy) NSString *type;
@property(copy) NSString *useMap;
@property(copy) NSString *value;
@property(readonly) BOOL willValidate;
@property BOOL indeterminate;
@property int selectionStart;
@property int selectionEnd;
@property(readonly, copy) NSString *altDisplayString;
@property(readonly, copy) NSURL *absoluteImageURL;
@property(readonly, retain) DOMFileList *files;
- (void)select;
- (void)click;
- (void)setSelectionRange:(int)arg1 end:(int)arg2;

@end

@interface DOMHTMLIsIndexElement : DOMHTMLInputElement
{
}

@property(readonly, retain) DOMHTMLFormElement *form;
@property(copy) NSString *prompt;

@end

@interface DOMHTMLLIElement : DOMHTMLElement
{
}

@property(copy) NSString *type;
@property int value;

@end

@interface DOMHTMLLabelElement : DOMHTMLElement
{
}

@property(readonly, retain) DOMHTMLFormElement *form;
@property(copy) NSString *accessKey;
@property(copy) NSString *htmlFor;

@end

@interface DOMHTMLLegendElement : DOMHTMLElement
{
}

@property(readonly, retain) DOMHTMLFormElement *form;
@property(copy) NSString *accessKey;
@property(copy) NSString *align;

@end

@interface DOMHTMLLinkElement : DOMHTMLElement
{
}

@property BOOL disabled;
@property(copy) NSString *charset;
@property(copy) NSString *href;
@property(copy) NSString *hreflang;
@property(copy) NSString *media;
@property(copy) NSString *rel;
@property(copy) NSString *rev;
@property(copy) NSString *target;
@property(copy) NSString *type;
@property(readonly, retain) DOMStyleSheet *sheet;
@property(readonly, copy) NSURL *absoluteLinkURL;

@end

@interface DOMHTMLMapElement : DOMHTMLElement
{
}

@property(readonly, retain) DOMHTMLCollection *areas;
@property(copy) NSString *name;

@end

@interface DOMHTMLMarqueeElement : DOMHTMLElement
{
}

- (void)start;
- (void)stop;

@end

@interface DOMHTMLMenuElement : DOMHTMLElement
{
}

@property BOOL compact;

@end

@interface DOMHTMLMetaElement : DOMHTMLElement
{
}

@property(copy) NSString *content;
@property(copy) NSString *httpEquiv;
@property(copy) NSString *name;
@property(copy) NSString *scheme;

@end

@interface DOMHTMLModElement : DOMHTMLElement
{
}

@property(copy) NSString *cite;
@property(copy) NSString *dateTime;

@end

@interface DOMHTMLOListElement : DOMHTMLElement
{
}

@property BOOL compact;
@property int start;
@property(copy) NSString *type;

@end

@interface DOMHTMLObjectElement : DOMHTMLElement
{
}

@property(readonly, retain) DOMHTMLFormElement *form;
@property(copy) NSString *code;
@property(copy) NSString *align;
@property(copy) NSString *archive;
@property(copy) NSString *border;
@property(copy) NSString *codeBase;
@property(copy) NSString *codeType;
@property(copy) NSString *data;
@property BOOL declare;
@property(copy) NSString *height;
@property int hspace;
@property(copy) NSString *name;
@property(copy) NSString *standby;
@property(copy) NSString *type;
@property(copy) NSString *useMap;
@property int vspace;
@property(copy) NSString *width;
@property(readonly, retain) DOMDocument *contentDocument;
@property(readonly, copy) NSURL *absoluteImageURL;
- (id)getSVGDocument;

@end

@interface DOMHTMLOptGroupElement : DOMHTMLElement
{
}

@property BOOL disabled;
@property(copy) NSString *label;

@end

@interface DOMHTMLOptionElement : DOMHTMLElement
{
}

@property(readonly, retain) DOMHTMLFormElement *form;
@property BOOL defaultSelected;
@property(readonly, copy) NSString *text;
@property(readonly) int index;
@property BOOL disabled;
@property(copy) NSString *label;
@property BOOL selected;
@property(copy) NSString *value;

@end

@interface DOMHTMLOptionsCollection : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property int selectedIndex;
@property unsigned int length;
- (void)add:(id)arg1 index:(unsigned int)arg2;
- (void)remove:(unsigned int)arg1;
- (id)item:(unsigned int)arg1;
- (id)namedItem:(id)arg1;

@end

@interface DOMHTMLParagraphElement : DOMHTMLElement
{
}

@property(copy) NSString *align;

@end

@interface DOMHTMLParamElement : DOMHTMLElement
{
}

@property(copy) NSString *name;
@property(copy) NSString *type;
@property(copy) NSString *value;
@property(copy) NSString *valueType;

@end

@interface DOMHTMLPreElement : DOMHTMLElement
{
}

@property int width;
@property BOOL wrap;

@end

@interface DOMHTMLQuoteElement : DOMHTMLElement
{
}

@property(copy) NSString *cite;

@end

@interface DOMHTMLScriptElement : DOMHTMLElement
{
}

@property(copy) NSString *text;
@property(copy) NSString *htmlFor;
@property(copy) NSString *event;
@property(copy) NSString *charset;
@property BOOL defer;
@property(copy) NSString *src;
@property(copy) NSString *type;

@end

@interface DOMHTMLSelectElement : DOMHTMLElement
{
}

@property(readonly, copy) NSString *type;
@property int selectedIndex;
@property(copy) NSString *value;
@property(readonly) int length;
@property(readonly, retain) DOMHTMLFormElement *form;
@property(readonly) BOOL willValidate;
@property(readonly, retain) DOMHTMLOptionsCollection *options;
@property BOOL disabled;
@property BOOL autofocus;
@property BOOL multiple;
@property(copy) NSString *name;
@property int size;
- (void)add:(id)arg1 before:(id)arg2;
- (void)add:(id)arg1:(id)arg2;
- (void)remove:(int)arg1;
- (id)item:(unsigned int)arg1;
- (id)namedItem:(id)arg1;

@end

@interface DOMHTMLStyleElement : DOMHTMLElement
{
}

@property BOOL disabled;
@property(copy) NSString *media;
@property(copy) NSString *type;
@property(readonly, retain) DOMStyleSheet *sheet;

@end

@interface DOMHTMLTableCaptionElement : DOMHTMLElement
{
}

@property(copy) NSString *align;

@end

@interface DOMHTMLTableCellElement : DOMHTMLElement
{
}

@property(readonly) int cellIndex;
@property(copy) NSString *abbr;
@property(copy) NSString *align;
@property(copy) NSString *axis;
@property(copy) NSString *bgColor;
@property(copy) NSString *ch;
@property(copy) NSString *chOff;
@property int colSpan;
@property(copy) NSString *headers;
@property(copy) NSString *height;
@property BOOL noWrap;
@property int rowSpan;
@property(copy) NSString *scope;
@property(copy) NSString *vAlign;
@property(copy) NSString *width;

@end

@interface DOMHTMLTableColElement : DOMHTMLElement
{
}

@property(copy) NSString *align;
@property(copy) NSString *ch;
@property(copy) NSString *chOff;
@property int span;
@property(copy) NSString *vAlign;
@property(copy) NSString *width;

@end

@interface DOMHTMLTableElement : DOMHTMLElement
{
}

@property(retain) DOMHTMLTableCaptionElement *caption;
@property(retain) DOMHTMLTableSectionElement *tHead;
@property(retain) DOMHTMLTableSectionElement *tFoot;
@property(readonly, retain) DOMHTMLCollection *rows;
@property(readonly, retain) DOMHTMLCollection *tBodies;
@property(copy) NSString *align;
@property(copy) NSString *bgColor;
@property(copy) NSString *border;
@property(copy) NSString *cellPadding;
@property(copy) NSString *cellSpacing;
@property(copy) NSString *frameBorders;
@property(copy) NSString *rules;
@property(copy) NSString *summary;
@property(copy) NSString *width;
- (id)createTHead;
- (void)deleteTHead;
- (id)createTFoot;
- (void)deleteTFoot;
- (id)createCaption;
- (void)deleteCaption;
- (id)insertRow:(int)arg1;
- (void)deleteRow:(int)arg1;

@end

@interface DOMHTMLTableRowElement : DOMHTMLElement
{
}

@property(readonly) int rowIndex;
@property(readonly) int sectionRowIndex;
@property(readonly, retain) DOMHTMLCollection *cells;
@property(copy) NSString *align;
@property(copy) NSString *bgColor;
@property(copy) NSString *ch;
@property(copy) NSString *chOff;
@property(copy) NSString *vAlign;
- (id)insertCell:(int)arg1;
- (void)deleteCell:(int)arg1;

@end

@interface DOMHTMLTableSectionElement : DOMHTMLElement
{
}

@property(copy) NSString *align;
@property(copy) NSString *ch;
@property(copy) NSString *chOff;
@property(copy) NSString *vAlign;
@property(readonly, retain) DOMHTMLCollection *rows;
- (id)insertRow:(int)arg1;
- (void)deleteRow:(int)arg1;

@end

@interface DOMHTMLTextAreaElement : DOMHTMLElement
{
}

@property(copy) NSString *defaultValue;
@property(readonly, retain) DOMHTMLFormElement *form;
@property(copy) NSString *accessKey;
@property int cols;
@property BOOL disabled;
@property BOOL autofocus;
@property(copy) NSString *name;
@property BOOL readOnly;
@property int rows;
@property(readonly, copy) NSString *type;
@property(copy) NSString *value;
@property(readonly) BOOL willValidate;
@property int selectionStart;
@property int selectionEnd;
- (void)select;
- (void)setSelectionRange:(int)arg1 end:(int)arg2;

@end

@interface DOMHTMLTitleElement : DOMHTMLElement
{
}

@property(copy) NSString *text;

@end

@interface DOMHTMLUListElement : DOMHTMLElement
{
}

@property BOOL compact;
@property(copy) NSString *type;

@end

@interface DOMKeyboardEvent : DOMUIEvent
{
}

@property(readonly, copy) NSString *keyIdentifier;
@property(readonly) unsigned int keyLocation;
@property(readonly) BOOL ctrlKey;
@property(readonly) BOOL shiftKey;
@property(readonly) BOOL altKey;
@property(readonly) BOOL metaKey;
@property(readonly) BOOL altGraphKey;
@property(readonly) int keyCode;
@property(readonly) int charCode;
- (BOOL)getModifierState:(id)arg1;
- (void)initKeyboardEvent:(id)arg1 canBubble:(BOOL)arg2 cancelable:(BOOL)arg3 view:(id)arg4 keyIdentifier:(id)arg5 keyLocation:(unsigned int)arg6 ctrlKey:(BOOL)arg7 altKey:(BOOL)arg8 shiftKey:(BOOL)arg9 metaKey:(BOOL)arg10 altGraphKey:(BOOL)arg11;
- (void)initKeyboardEvent:(id)arg1 canBubble:(BOOL)arg2 cancelable:(BOOL)arg3 view:(id)arg4 keyIdentifier:(id)arg5 keyLocation:(unsigned int)arg6 ctrlKey:(BOOL)arg7 altKey:(BOOL)arg8 shiftKey:(BOOL)arg9 metaKey:(BOOL)arg10;

@end

@interface DOMMediaList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(copy) NSString *mediaText;
@property(readonly) unsigned int length;
- (id)item:(unsigned int)arg1;
- (void)deleteMedium:(id)arg1;
- (void)appendMedium:(id)arg1;

@end

@interface DOMMessageEvent : DOMEvent
{
}

@property(readonly, copy) NSString *data;
@property(readonly, copy) NSString *origin;
@property(readonly, copy) NSString *lastEventId;
@property(readonly, retain) DOMAbstractView *source;
@property(readonly, retain) DOMMessagePort *messagePort;
- (void)initMessageEvent:(id)arg1 canBubbleArg:(BOOL)arg2 cancelableArg:(BOOL)arg3 dataArg:(id)arg4 originArg:(id)arg5 lastEventIdArg:(id)arg6 sourceArg:(id)arg7 messagePort:(id)arg8;

@end

@interface DOMMessagePort : DOMObject
{
}

- (void)dealloc;
- (void)finalize;

@end

@interface DOMMouseEvent : DOMUIEvent
{
}

@property(readonly) int screenX;
@property(readonly) int screenY;
@property(readonly) int clientX;
@property(readonly) int clientY;
@property(readonly) BOOL ctrlKey;
@property(readonly) BOOL shiftKey;
@property(readonly) BOOL altKey;
@property(readonly) BOOL metaKey;
@property(readonly) unsigned short button;
@property(readonly, retain) id <DOMEventTarget> relatedTarget;
@property(readonly) int offsetX;
@property(readonly) int offsetY;
@property(readonly) int x;
@property(readonly) int y;
@property(readonly, retain) DOMNode *fromElement;
@property(readonly, retain) DOMNode *toElement;
- (void)initMouseEvent:(id)arg1 canBubble:(BOOL)arg2 cancelable:(BOOL)arg3 view:(id)arg4 detail:(int)arg5 screenX:(int)arg6 screenY:(int)arg7 clientX:(int)arg8 clientY:(int)arg9 ctrlKey:(BOOL)arg10 altKey:(BOOL)arg11 shiftKey:(BOOL)arg12 metaKey:(BOOL)arg13 button:(unsigned short)arg14 relatedTarget:(id)arg15;
- (void)initMouseEvent:(id)arg1:(BOOL)arg2:(BOOL)arg3:(id)arg4:(int)arg5:(int)arg6:(int)arg7:(int)arg8:(int)arg9:(BOOL)arg10:(BOOL)arg11:(BOOL)arg12:(BOOL)arg13:(unsigned short)arg14:(id)arg15;

@end

@interface DOMMutationEvent : DOMEvent
{
}

@property(readonly, retain) DOMNode *relatedNode;
@property(readonly, copy) NSString *prevValue;
@property(readonly, copy) NSString *newValue;
@property(readonly, copy) NSString *attrName;
@property(readonly) unsigned short attrChange;
- (void)initMutationEvent:(id)arg1 canBubble:(BOOL)arg2 cancelable:(BOOL)arg3 relatedNode:(id)arg4 prevValue:(id)arg5 newValue:(id)arg6 attrName:(id)arg7 attrChange:(unsigned short)arg8;
- (void)initMutationEvent:(id)arg1:(BOOL)arg2:(BOOL)arg3:(id)arg4:(id)arg5:(id)arg6:(id)arg7:(unsigned short)arg8;

@end

@interface DOMNamedNodeMap : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned int length;
- (id)getNamedItem:(id)arg1;
- (id)setNamedItem:(id)arg1;
- (id)removeNamedItem:(id)arg1;
- (id)item:(unsigned int)arg1;
- (id)getNamedItemNS:(id)arg1 localName:(id)arg2;
- (id)getNamedItemNS:(id)arg1:(id)arg2;
- (id)setNamedItemNS:(id)arg1;
- (id)removeNamedItemNS:(id)arg1 localName:(id)arg2;
- (id)removeNamedItemNS:(id)arg1:(id)arg2;

@end

@interface DOMNode : DOMObject <DOMEventTarget>
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, copy) NSString *nodeName;
@property(copy) NSString *nodeValue;
@property(readonly) unsigned short nodeType;
@property(readonly, retain) DOMNode *parentNode;
@property(readonly, retain) DOMNodeList *childNodes;
@property(readonly, retain) DOMNode *firstChild;
@property(readonly, retain) DOMNode *lastChild;
@property(readonly, retain) DOMNode *previousSibling;
@property(readonly, retain) DOMNode *nextSibling;
@property(readonly, retain) DOMNamedNodeMap *attributes;
@property(readonly, retain) DOMDocument *ownerDocument;
@property(readonly, copy) NSString *namespaceURI;
@property(copy) NSString *prefix;
@property(readonly, copy) NSString *localName;
@property(readonly, copy) NSString *baseURI;
@property(copy) NSString *textContent;
@property(readonly, retain) DOMElement *parentElement;
@property(readonly) BOOL isContentEditable;
- (id)insertBefore:(id)arg1 refChild:(id)arg2;
- (id)insertBefore:(id)arg1:(id)arg2;
- (id)replaceChild:(id)arg1 oldChild:(id)arg2;
- (id)replaceChild:(id)arg1:(id)arg2;
- (id)removeChild:(id)arg1;
- (id)appendChild:(id)arg1;
- (BOOL)hasChildNodes;
- (id)cloneNode:(BOOL)arg1;
- (void)normalize;
- (BOOL)isSupported:(id)arg1 version:(id)arg2;
- (BOOL)isSupported:(id)arg1:(id)arg2;
- (BOOL)hasAttributes;
- (BOOL)isSameNode:(id)arg1;
- (BOOL)isEqualNode:(id)arg1;
- (id)lookupPrefix:(id)arg1;
- (BOOL)isDefaultNamespace:(id)arg1;
- (id)lookupNamespaceURI:(id)arg1;
- (unsigned short)compareDocumentPosition:(id)arg1;
- (void)addEventListener:(id)arg1 listener:(id)arg2 useCapture:(BOOL)arg3;
- (void)addEventListener:(id)arg1:(id)arg2:(BOOL)arg3;
- (void)removeEventListener:(id)arg1 listener:(id)arg2 useCapture:(BOOL)arg3;
- (void)removeEventListener:(id)arg1:(id)arg2:(BOOL)arg3;
- (BOOL)dispatchEvent:(id)arg1;

@end

@interface DOMNodeIterator : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, retain) DOMNode *root;
@property(readonly) unsigned int whatToShow;
@property(readonly, retain) id <DOMNodeFilter> filter;
@property(readonly) BOOL expandEntityReferences;
@property(readonly, retain) DOMNode *referenceNode;
@property(readonly) BOOL pointerBeforeReferenceNode;
- (id)nextNode;
- (id)previousNode;
- (void)detach;

@end

@interface DOMNodeList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned int length;
- (id)item:(unsigned int)arg1;

@end

@interface DOMNotation : DOMNode
{
}

@property(readonly, copy) NSString *publicId;
@property(readonly, copy) NSString *systemId;

@end

@interface DOMObject : WebScriptObject <NSCopying>
{
    struct DOMObjectInternal *_internal;
}

- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DOMOverflowEvent : DOMEvent
{
}

@property(readonly) unsigned short orient;
@property(readonly) BOOL horizontalOverflow;
@property(readonly) BOOL verticalOverflow;
- (void)initOverflowEvent:(unsigned short)arg1 horizontalOverflow:(BOOL)arg2 verticalOverflow:(BOOL)arg3;

@end

@interface DOMProcessingInstruction : DOMNode
{
}

@property(readonly, copy) NSString *target;
@property(copy) NSString *data;
@property(readonly, retain) DOMStyleSheet *sheet;

@end

@interface DOMProgressEvent : DOMEvent
{
}

@property(readonly) BOOL lengthComputable;
@property(readonly) unsigned int loaded;
@property(readonly) unsigned int total;
- (void)initProgressEvent:(id)arg1 canBubbleArg:(BOOL)arg2 cancelableArg:(BOOL)arg3 lengthComputableArg:(BOOL)arg4 loadedArg:(unsigned int)arg5 totalArg:(unsigned int)arg6;

@end

@interface DOMRGBColor : DOMObject
{
}

+ (void)initialize;
- (void)dealloc;
@property(readonly, retain) DOMCSSPrimitiveValue *red;
@property(readonly, retain) DOMCSSPrimitiveValue *green;
@property(readonly, retain) DOMCSSPrimitiveValue *blue;
@property(readonly, retain) DOMCSSPrimitiveValue *alpha;
@property(readonly, copy) NSColor *color;

@end

@interface DOMRange : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, retain) DOMNode *startContainer;
@property(readonly) int startOffset;
@property(readonly, retain) DOMNode *endContainer;
@property(readonly) int endOffset;
@property(readonly) BOOL collapsed;
@property(readonly, retain) DOMNode *commonAncestorContainer;
@property(readonly, copy) NSString *text;
- (void)setStart:(id)arg1 offset:(int)arg2;
- (void)setStart:(id)arg1:(int)arg2;
- (void)setEnd:(id)arg1 offset:(int)arg2;
- (void)setEnd:(id)arg1:(int)arg2;
- (void)setStartBefore:(id)arg1;
- (void)setStartAfter:(id)arg1;
- (void)setEndBefore:(id)arg1;
- (void)setEndAfter:(id)arg1;
- (void)collapse:(BOOL)arg1;
- (void)selectNode:(id)arg1;
- (void)selectNodeContents:(id)arg1;
- (short)compareBoundaryPoints:(unsigned short)arg1 sourceRange:(id)arg2;
- (short)compareBoundaryPoints:(unsigned short)arg1:(id)arg2;
- (void)deleteContents;
- (id)extractContents;
- (id)cloneContents;
- (void)insertNode:(id)arg1;
- (void)surroundContents:(id)arg1;
- (id)cloneRange;
- (id)toString;
- (void)detach;
- (id)createContextualFragment:(id)arg1;
- (BOOL)intersectsNode:(id)arg1;
- (short)compareNode:(id)arg1;
- (short)comparePoint:(id)arg1 offset:(int)arg2;
- (BOOL)isPointInRange:(id)arg1 offset:(int)arg2;

@end

@interface DOMRect : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, retain) DOMCSSPrimitiveValue *top;
@property(readonly, retain) DOMCSSPrimitiveValue *right;
@property(readonly, retain) DOMCSSPrimitiveValue *bottom;
@property(readonly, retain) DOMCSSPrimitiveValue *left;

@end

@interface DOMSVGAElement : DOMSVGElement <DOMSVGURIReference, DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable>
{
}

@property(readonly, retain) DOMSVGAnimatedString *target;
@property(readonly, retain) DOMSVGAnimatedString *href;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGAltGlyphElement : DOMSVGTextPositioningElement <DOMSVGURIReference>
{
}

@property(copy) NSString *glyphRef;
@property(copy) NSString *format;
@property(readonly, retain) DOMSVGAnimatedString *href;

@end

@interface DOMSVGAngle : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned short unitType;
@property float value;
@property float valueInSpecifiedUnits;
@property(copy) NSString *valueAsString;
- (void)newValueSpecifiedUnits:(unsigned short)arg1 valueInSpecifiedUnits:(float)arg2;
- (void)convertToSpecifiedUnits:(unsigned short)arg1;

@end

@interface DOMSVGAnimateColorElement : DOMSVGAnimationElement
{
}

@end

@interface DOMSVGAnimateElement : DOMSVGAnimationElement
{
}

@end

@interface DOMSVGAnimateTransformElement : DOMSVGAnimationElement
{
}

@end

@interface DOMSVGAnimatedAngle : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, retain) DOMSVGAngle *baseVal;
@property(readonly, retain) DOMSVGAngle *animVal;

@end

@interface DOMSVGAnimatedBoolean : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property BOOL baseVal;
@property(readonly) BOOL animVal;

@end

@interface DOMSVGAnimatedEnumeration : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property unsigned short baseVal;
@property(readonly) unsigned short animVal;

@end

@interface DOMSVGAnimatedInteger : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property int baseVal;
@property(readonly) int animVal;

@end

@interface DOMSVGAnimatedLength : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, retain) DOMSVGLength *baseVal;
@property(readonly, retain) DOMSVGLength *animVal;

@end

@interface DOMSVGAnimatedLengthList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, retain) DOMSVGLengthList *baseVal;
@property(readonly, retain) DOMSVGLengthList *animVal;

@end

@interface DOMSVGAnimatedNumber : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property float baseVal;
@property(readonly) float animVal;

@end

@interface DOMSVGAnimatedNumberList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, retain) DOMSVGNumberList *baseVal;
@property(readonly, retain) DOMSVGNumberList *animVal;

@end

@interface DOMSVGAnimatedPreserveAspectRatio : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, retain) DOMSVGPreserveAspectRatio *baseVal;
@property(readonly, retain) DOMSVGPreserveAspectRatio *animVal;

@end

@interface DOMSVGAnimatedRect : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, retain) DOMSVGRect *baseVal;
@property(readonly, retain) DOMSVGRect *animVal;

@end

@interface DOMSVGAnimatedString : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(copy) NSString *baseVal;
@property(readonly, copy) NSString *animVal;

@end

@interface DOMSVGAnimatedTransformList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, retain) DOMSVGTransformList *baseVal;
@property(readonly, retain) DOMSVGTransformList *animVal;

@end

@interface DOMSVGAnimationElement : DOMSVGElement <DOMSVGTests, DOMSVGExternalResourcesRequired, DOMElementTimeControl>
{
}

@property(readonly, retain) DOMSVGElement *targetElement;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
- (float)getStartTime;
- (float)getCurrentTime;
- (float)getSimpleDuration;
- (BOOL)hasExtension:(id)arg1;
- (BOOL)beginElement;
- (BOOL)beginElementAt:(float)arg1;
- (BOOL)endElement;
- (BOOL)endElementAt:(float)arg1;

@end

@interface DOMSVGCircleElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable>
{
}

@property(readonly, retain) DOMSVGAnimatedLength *cx;
@property(readonly, retain) DOMSVGAnimatedLength *cy;
@property(readonly, retain) DOMSVGAnimatedLength *r;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGClipPathElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable>
{
}

@property(readonly, retain) DOMSVGAnimatedEnumeration *clipPathUnits;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGColor : DOMCSSValue
{
}

@property(readonly) unsigned short colorType;
@property(readonly, retain) DOMRGBColor *rgbColor;
- (void)setRGBColor:(id)arg1;
- (void)setRGBColorICCColor:(id)arg1 iccColor:(id)arg2;
- (void)setColor:(unsigned short)arg1 rgbColor:(id)arg2 iccColor:(id)arg3;

@end

@interface DOMSVGCursorElement : DOMSVGElement <DOMSVGURIReference, DOMSVGTests, DOMSVGExternalResourcesRequired>
{
}

@property(readonly, retain) DOMSVGAnimatedLength *x;
@property(readonly, retain) DOMSVGAnimatedLength *y;
@property(readonly, retain) DOMSVGAnimatedString *href;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
- (BOOL)hasExtension:(id)arg1;

@end

@interface DOMSVGDefinitionSrcElement : DOMSVGElement
{
}

@end

@interface DOMSVGDefsElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable>
{
}

@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGDescElement : DOMSVGElement <DOMSVGLangSpace, DOMSVGStylable>
{
}

@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
- (id)getPresentationAttribute:(id)arg1;

@end

@interface DOMSVGDocument : DOMDocument
{
}

@property(readonly, retain) DOMSVGSVGElement *rootElement;
- (id)createEvent:(id)arg1;

@end

@interface DOMSVGElement : DOMElement
{
}

@property(copy) NSString *idName;
@property(copy) NSString *xmlbase;
@property(readonly, retain) DOMSVGSVGElement *ownerSVGElement;
@property(readonly, retain) DOMSVGElement *viewportElement;

@end

@interface DOMSVGElementInstance : DOMObject <DOMEventTarget>
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, retain) DOMSVGElement *correspondingElement;
@property(readonly, retain) DOMSVGUseElement *correspondingUseElement;
@property(readonly, retain) DOMSVGElementInstance *parentNode;
@property(readonly, retain) DOMSVGElementInstanceList *childNodes;
@property(readonly, retain) DOMSVGElementInstance *firstChild;
@property(readonly, retain) DOMSVGElementInstance *lastChild;
@property(readonly, retain) DOMSVGElementInstance *previousSibling;
@property(readonly, retain) DOMSVGElementInstance *nextSibling;
- (void)addEventListener:(id)arg1 listener:(id)arg2 useCapture:(BOOL)arg3;
- (void)addEventListener:(id)arg1:(id)arg2:(BOOL)arg3;
- (void)removeEventListener:(id)arg1 listener:(id)arg2 useCapture:(BOOL)arg3;
- (void)removeEventListener:(id)arg1:(id)arg2:(BOOL)arg3;
- (BOOL)dispatchEvent:(id)arg1;

@end

@interface DOMSVGElementInstanceList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned int length;
- (id)item:(unsigned int)arg1;

@end

@interface DOMSVGEllipseElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable>
{
}

@property(readonly, retain) DOMSVGAnimatedLength *cx;
@property(readonly, retain) DOMSVGAnimatedLength *cy;
@property(readonly, retain) DOMSVGAnimatedLength *rx;
@property(readonly, retain) DOMSVGAnimatedLength *ry;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGFontElement : DOMSVGElement
{
}

@end

@interface DOMSVGFontFaceElement : DOMSVGElement
{
}

@end

@interface DOMSVGFontFaceFormatElement : DOMSVGElement
{
}

@end

@interface DOMSVGFontFaceNameElement : DOMSVGElement
{
}

@end

@interface DOMSVGFontFaceSrcElement : DOMSVGElement
{
}

@end

@interface DOMSVGFontFaceUriElement : DOMSVGElement
{
}

@end

@interface DOMSVGForeignObjectElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable>
{
}

@property(readonly, retain) DOMSVGAnimatedLength *x;
@property(readonly, retain) DOMSVGAnimatedLength *y;
@property(readonly, retain) DOMSVGAnimatedLength *width;
@property(readonly, retain) DOMSVGAnimatedLength *height;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGGElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable>
{
}

@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGGlyphElement : DOMSVGElement
{
}

@end

@interface DOMSVGGradientElement : DOMSVGElement <DOMSVGURIReference, DOMSVGExternalResourcesRequired, DOMSVGStylable>
{
}

@property(readonly, retain) DOMSVGAnimatedEnumeration *gradientUnits;
@property(readonly, retain) DOMSVGAnimatedTransformList *gradientTransform;
@property(readonly, retain) DOMSVGAnimatedEnumeration *spreadMethod;
@property(readonly, retain) DOMSVGAnimatedString *href;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
- (id)getPresentationAttribute:(id)arg1;

@end

@interface DOMSVGImageElement : DOMSVGElement <DOMSVGURIReference, DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable>
{
}

@property(readonly, retain) DOMSVGAnimatedLength *x;
@property(readonly, retain) DOMSVGAnimatedLength *y;
@property(readonly, retain) DOMSVGAnimatedLength *width;
@property(readonly, retain) DOMSVGAnimatedLength *height;
@property(readonly, retain) DOMSVGAnimatedPreserveAspectRatio *preserveAspectRatio;
@property(readonly, retain) DOMSVGAnimatedString *href;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGLength : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned short unitType;
@property float value;
@property float valueInSpecifiedUnits;
@property(copy) NSString *valueAsString;
- (void)newValueSpecifiedUnits:(unsigned short)arg1 valueInSpecifiedUnits:(float)arg2;
- (void)convertToSpecifiedUnits:(unsigned short)arg1;

@end

@interface DOMSVGLengthList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned int numberOfItems;
- (void)clear;
- (id)initialize:(id)arg1;
- (id)getItem:(unsigned int)arg1;
- (id)insertItemBefore:(id)arg1 index:(unsigned int)arg2;
- (id)replaceItem:(id)arg1 index:(unsigned int)arg2;
- (id)removeItem:(unsigned int)arg1;
- (id)appendItem:(id)arg1;

@end

@interface DOMSVGLineElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable>
{
}

@property(readonly, retain) DOMSVGAnimatedLength *x1;
@property(readonly, retain) DOMSVGAnimatedLength *y1;
@property(readonly, retain) DOMSVGAnimatedLength *x2;
@property(readonly, retain) DOMSVGAnimatedLength *y2;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGLinearGradientElement : DOMSVGGradientElement
{
}

@property(readonly, retain) DOMSVGAnimatedLength *x1;
@property(readonly, retain) DOMSVGAnimatedLength *y1;
@property(readonly, retain) DOMSVGAnimatedLength *x2;
@property(readonly, retain) DOMSVGAnimatedLength *y2;

@end

@interface DOMSVGMarkerElement : DOMSVGElement <DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGFitToViewBox>
{
}

@property(readonly, retain) DOMSVGAnimatedLength *refX;
@property(readonly, retain) DOMSVGAnimatedLength *refY;
@property(readonly, retain) DOMSVGAnimatedEnumeration *markerUnits;
@property(readonly, retain) DOMSVGAnimatedLength *markerWidth;
@property(readonly, retain) DOMSVGAnimatedLength *markerHeight;
@property(readonly, retain) DOMSVGAnimatedEnumeration *orientType;
@property(readonly, retain) DOMSVGAnimatedAngle *orientAngle;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedRect *viewBox;
@property(readonly, retain) DOMSVGAnimatedPreserveAspectRatio *preserveAspectRatio;
- (void)setOrientToAuto;
- (void)setOrientToAngle:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;

@end

@interface DOMSVGMaskElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable>
{
}

@property(readonly, retain) DOMSVGAnimatedEnumeration *maskUnits;
@property(readonly, retain) DOMSVGAnimatedEnumeration *maskContentUnits;
@property(readonly, retain) DOMSVGAnimatedLength *x;
@property(readonly, retain) DOMSVGAnimatedLength *y;
@property(readonly, retain) DOMSVGAnimatedLength *width;
@property(readonly, retain) DOMSVGAnimatedLength *height;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;

@end

@interface DOMSVGMatrix : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property double a;
@property double b;
@property double c;
@property double d;
@property double e;
@property double f;
- (id)multiply:(id)arg1;
- (id)inverse;
- (id)translate:(float)arg1 y:(float)arg2;
- (id)scale:(float)arg1;
- (id)scaleNonUniform:(float)arg1 scaleFactorY:(float)arg2;
- (id)rotate:(float)arg1;
- (id)rotateFromVector:(float)arg1 y:(float)arg2;
- (id)flipX;
- (id)flipY;
- (id)skewX:(float)arg1;
- (id)skewY:(float)arg1;

@end

@interface DOMSVGMetadataElement : DOMSVGElement
{
}

@end

@interface DOMSVGMissingGlyphElement : DOMSVGElement
{
}

@end

@interface DOMSVGNumber : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property float value;

@end

@interface DOMSVGNumberList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned int numberOfItems;
- (void)clear;
- (id)initialize:(id)arg1;
- (id)getItem:(unsigned int)arg1;
- (id)insertItemBefore:(id)arg1 index:(unsigned int)arg2;
- (id)replaceItem:(id)arg1 index:(unsigned int)arg2;
- (id)removeItem:(unsigned int)arg1;
- (id)appendItem:(id)arg1;

@end

@interface DOMSVGPaint : DOMSVGColor
{
}

@property(readonly) unsigned short paintType;
@property(readonly, copy) NSString *uri;
- (void)setUri:(id)arg1;
- (void)setPaint:(unsigned short)arg1 uri:(id)arg2 rgbColor:(id)arg3 iccColor:(id)arg4;

@end

@interface DOMSVGPathElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable, DOMSVGAnimatedPathData>
{
}

@property(readonly, retain) DOMSVGAnimatedNumber *pathLength;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
@property(readonly, retain) DOMSVGPathSegList *pathSegList;
@property(readonly, retain) DOMSVGPathSegList *normalizedPathSegList;
@property(readonly, retain) DOMSVGPathSegList *animatedPathSegList;
@property(readonly, retain) DOMSVGPathSegList *animatedNormalizedPathSegList;
- (float)getTotalLength;
- (id)getPointAtLength:(float)arg1;
- (unsigned int)getPathSegAtLength:(float)arg1;
- (id)createSVGPathSegClosePath;
- (id)createSVGPathSegMovetoAbs:(float)arg1 y:(float)arg2;
- (id)createSVGPathSegMovetoRel:(float)arg1 y:(float)arg2;
- (id)createSVGPathSegLinetoAbs:(float)arg1 y:(float)arg2;
- (id)createSVGPathSegLinetoRel:(float)arg1 y:(float)arg2;
- (id)createSVGPathSegCurvetoCubicAbs:(float)arg1 y:(float)arg2 x1:(float)arg3 y1:(float)arg4 x2:(float)arg5 y2:(float)arg6;
- (id)createSVGPathSegCurvetoCubicRel:(float)arg1 y:(float)arg2 x1:(float)arg3 y1:(float)arg4 x2:(float)arg5 y2:(float)arg6;
- (id)createSVGPathSegCurvetoQuadraticAbs:(float)arg1 y:(float)arg2 x1:(float)arg3 y1:(float)arg4;
- (id)createSVGPathSegCurvetoQuadraticRel:(float)arg1 y:(float)arg2 x1:(float)arg3 y1:(float)arg4;
- (id)createSVGPathSegArcAbs:(float)arg1 y:(float)arg2 r1:(float)arg3 r2:(float)arg4 angle:(float)arg5 largeArcFlag:(BOOL)arg6 sweepFlag:(BOOL)arg7;
- (id)createSVGPathSegArcRel:(float)arg1 y:(float)arg2 r1:(float)arg3 r2:(float)arg4 angle:(float)arg5 largeArcFlag:(BOOL)arg6 sweepFlag:(BOOL)arg7;
- (id)createSVGPathSegLinetoHorizontalAbs:(float)arg1;
- (id)createSVGPathSegLinetoHorizontalRel:(float)arg1;
- (id)createSVGPathSegLinetoVerticalAbs:(float)arg1;
- (id)createSVGPathSegLinetoVerticalRel:(float)arg1;
- (id)createSVGPathSegCurvetoCubicSmoothAbs:(float)arg1 y:(float)arg2 x2:(float)arg3 y2:(float)arg4;
- (id)createSVGPathSegCurvetoCubicSmoothRel:(float)arg1 y:(float)arg2 x2:(float)arg3 y2:(float)arg4;
- (id)createSVGPathSegCurvetoQuadraticSmoothAbs:(float)arg1 y:(float)arg2;
- (id)createSVGPathSegCurvetoQuadraticSmoothRel:(float)arg1 y:(float)arg2;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGPathSeg : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned short pathSegType;
@property(readonly, copy) NSString *pathSegTypeAsLetter;

@end

@interface DOMSVGPathSegArcAbs : DOMSVGPathSeg
{
}

@property float x;
@property float y;
@property float r1;
@property float r2;
@property float angle;
@property BOOL largeArcFlag;
@property BOOL sweepFlag;

@end

@interface DOMSVGPathSegArcRel : DOMSVGPathSeg
{
}

@property float x;
@property float y;
@property float r1;
@property float r2;
@property float angle;
@property BOOL largeArcFlag;
@property BOOL sweepFlag;

@end

@interface DOMSVGPathSegClosePath : DOMSVGPathSeg
{
}

@end

@interface DOMSVGPathSegCurvetoCubicAbs : DOMSVGPathSeg
{
}

@property float x;
@property float y;
@property float x1;
@property float y1;
@property float x2;
@property float y2;

@end

@interface DOMSVGPathSegCurvetoCubicRel : DOMSVGPathSeg
{
}

@property float x;
@property float y;
@property float x1;
@property float y1;
@property float x2;
@property float y2;

@end

@interface DOMSVGPathSegCurvetoCubicSmoothAbs : DOMSVGPathSeg
{
}

@property float x;
@property float y;
@property float x2;
@property float y2;

@end

@interface DOMSVGPathSegCurvetoCubicSmoothRel : DOMSVGPathSeg
{
}

@property float x;
@property float y;
@property float x2;
@property float y2;

@end

@interface DOMSVGPathSegCurvetoQuadraticAbs : DOMSVGPathSeg
{
}

@property float x;
@property float y;
@property float x1;
@property float y1;

@end

@interface DOMSVGPathSegCurvetoQuadraticRel : DOMSVGPathSeg
{
}

@property float x;
@property float y;
@property float x1;
@property float y1;

@end

@interface DOMSVGPathSegCurvetoQuadraticSmoothAbs : DOMSVGPathSeg
{
}

@property float x;
@property float y;

@end

@interface DOMSVGPathSegCurvetoQuadraticSmoothRel : DOMSVGPathSeg
{
}

@property float x;
@property float y;

@end

@interface DOMSVGPathSegLinetoAbs : DOMSVGPathSeg
{
}

@property float x;
@property float y;

@end

@interface DOMSVGPathSegLinetoHorizontalAbs : DOMSVGPathSeg
{
}

@property float x;

@end

@interface DOMSVGPathSegLinetoHorizontalRel : DOMSVGPathSeg
{
}

@property float x;

@end

@interface DOMSVGPathSegLinetoRel : DOMSVGPathSeg
{
}

@property float x;
@property float y;

@end

@interface DOMSVGPathSegLinetoVerticalAbs : DOMSVGPathSeg
{
}

@property float y;

@end

@interface DOMSVGPathSegLinetoVerticalRel : DOMSVGPathSeg
{
}

@property float y;

@end

@interface DOMSVGPathSegList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned int numberOfItems;
- (void)clear;
- (id)initialize:(id)arg1;
- (id)getItem:(unsigned int)arg1;
- (id)insertItemBefore:(id)arg1 index:(unsigned int)arg2;
- (id)replaceItem:(id)arg1 index:(unsigned int)arg2;
- (id)removeItem:(unsigned int)arg1;
- (id)appendItem:(id)arg1;

@end

@interface DOMSVGPathSegMovetoAbs : DOMSVGPathSeg
{
}

@property float x;
@property float y;

@end

@interface DOMSVGPathSegMovetoRel : DOMSVGPathSeg
{
}

@property float x;
@property float y;

@end

@interface DOMSVGPatternElement : DOMSVGElement <DOMSVGURIReference, DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGFitToViewBox>
{
}

@property(readonly, retain) DOMSVGAnimatedEnumeration *patternUnits;
@property(readonly, retain) DOMSVGAnimatedEnumeration *patternContentUnits;
@property(readonly, retain) DOMSVGAnimatedTransformList *patternTransform;
@property(readonly, retain) DOMSVGAnimatedLength *x;
@property(readonly, retain) DOMSVGAnimatedLength *y;
@property(readonly, retain) DOMSVGAnimatedLength *width;
@property(readonly, retain) DOMSVGAnimatedLength *height;
@property(readonly, retain) DOMSVGAnimatedString *href;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedRect *viewBox;
@property(readonly, retain) DOMSVGAnimatedPreserveAspectRatio *preserveAspectRatio;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;

@end

@interface DOMSVGPoint : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property float x;
@property float y;
- (id)matrixTransform:(id)arg1;

@end

@interface DOMSVGPointList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned int numberOfItems;
- (void)clear;
- (id)initialize:(id)arg1;
- (id)getItem:(unsigned int)arg1;
- (id)insertItemBefore:(id)arg1 index:(unsigned int)arg2;
- (id)replaceItem:(id)arg1 index:(unsigned int)arg2;
- (id)removeItem:(unsigned int)arg1;
- (id)appendItem:(id)arg1;

@end

@interface DOMSVGPolygonElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable, DOMSVGAnimatedPoints>
{
}

@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
@property(readonly, retain) DOMSVGPointList *points;
@property(readonly, retain) DOMSVGPointList *animatedPoints;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGPolylineElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable, DOMSVGAnimatedPoints>
{
}

@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
@property(readonly, retain) DOMSVGPointList *points;
@property(readonly, retain) DOMSVGPointList *animatedPoints;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGPreserveAspectRatio : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property unsigned short align;
@property unsigned short meetOrSlice;

@end

@interface DOMSVGRadialGradientElement : DOMSVGGradientElement
{
}

@property(readonly, retain) DOMSVGAnimatedLength *cx;
@property(readonly, retain) DOMSVGAnimatedLength *cy;
@property(readonly, retain) DOMSVGAnimatedLength *r;
@property(readonly, retain) DOMSVGAnimatedLength *fx;
@property(readonly, retain) DOMSVGAnimatedLength *fy;

@end

@interface DOMSVGRect : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property float x;
@property float y;
@property float width;
@property float height;

@end

@interface DOMSVGRectElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable>
{
}

@property(readonly, retain) DOMSVGAnimatedLength *x;
@property(readonly, retain) DOMSVGAnimatedLength *y;
@property(readonly, retain) DOMSVGAnimatedLength *width;
@property(readonly, retain) DOMSVGAnimatedLength *height;
@property(readonly, retain) DOMSVGAnimatedLength *rx;
@property(readonly, retain) DOMSVGAnimatedLength *ry;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGRenderingIntent : DOMObject
{
}

- (void)dealloc;
- (void)finalize;

@end

@interface DOMSVGSVGElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGLocatable, DOMSVGFitToViewBox, DOMSVGZoomAndPan>
{
}

@property(readonly, retain) DOMSVGAnimatedLength *x;
@property(readonly, retain) DOMSVGAnimatedLength *y;
@property(readonly, retain) DOMSVGAnimatedLength *width;
@property(readonly, retain) DOMSVGAnimatedLength *height;
@property(copy) NSString *contentScriptType;
@property(copy) NSString *contentStyleType;
@property(readonly, retain) DOMSVGRect *viewport;
@property(readonly) float pixelUnitToMillimeterX;
@property(readonly) float pixelUnitToMillimeterY;
@property(readonly) float screenPixelToMillimeterX;
@property(readonly) float screenPixelToMillimeterY;
@property BOOL useCurrentView;
@property float currentScale;
@property(readonly, retain) DOMSVGPoint *currentTranslate;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
@property(readonly, retain) DOMSVGAnimatedRect *viewBox;
@property(readonly, retain) DOMSVGAnimatedPreserveAspectRatio *preserveAspectRatio;
@property unsigned short zoomAndPan;
- (unsigned int)suspendRedraw:(unsigned int)arg1;
- (void)unsuspendRedraw:(unsigned int)arg1;
- (void)unsuspendRedrawAll;
- (void)forceRedraw;
- (void)pauseAnimations;
- (void)unpauseAnimations;
- (BOOL)animationsPaused;
- (float)getCurrentTime;
- (void)setCurrentTime:(float)arg1;
- (id)getIntersectionList:(id)arg1 referenceElement:(id)arg2;
- (id)getEnclosureList:(id)arg1 referenceElement:(id)arg2;
- (BOOL)checkIntersection:(id)arg1 rect:(id)arg2;
- (BOOL)checkEnclosure:(id)arg1 rect:(id)arg2;
- (void)deselectAll;
- (id)createSVGNumber;
- (id)createSVGLength;
- (id)createSVGAngle;
- (id)createSVGPoint;
- (id)createSVGMatrix;
- (id)createSVGRect;
- (id)createSVGTransform;
- (id)createSVGTransformFromMatrix:(id)arg1;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGScriptElement : DOMSVGElement <DOMSVGURIReference, DOMSVGExternalResourcesRequired>
{
}

@property(copy) NSString *type;
@property(readonly, retain) DOMSVGAnimatedString *href;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;

@end

@interface DOMSVGSetElement : DOMSVGAnimationElement
{
}

@end

@interface DOMSVGStopElement : DOMSVGElement <DOMSVGStylable>
{
}

@property(readonly, retain) DOMSVGAnimatedNumber *offset;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
- (id)getPresentationAttribute:(id)arg1;

@end

@interface DOMSVGStringList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned int numberOfItems;
- (void)clear;
- (id)initialize:(id)arg1;
- (id)getItem:(unsigned int)arg1;
- (id)insertItemBefore:(id)arg1 index:(unsigned int)arg2;
- (id)replaceItem:(id)arg1 index:(unsigned int)arg2;
- (id)removeItem:(unsigned int)arg1;
- (id)appendItem:(id)arg1;

@end

@interface DOMSVGStyleElement : DOMSVGElement
{
}

@property(copy) NSString *xmlspace;
@property(copy) NSString *type;
@property(copy) NSString *media;
@property(copy) NSString *title;

@end

@interface DOMSVGSwitchElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable>
{
}

@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGSymbolElement : DOMSVGElement <DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGFitToViewBox>
{
}

@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedRect *viewBox;
@property(readonly, retain) DOMSVGAnimatedPreserveAspectRatio *preserveAspectRatio;
- (id)getPresentationAttribute:(id)arg1;

@end

@interface DOMSVGTRefElement : DOMSVGTextPositioningElement <DOMSVGURIReference>
{
}

@property(readonly, retain) DOMSVGAnimatedString *href;

@end

@interface DOMSVGTSpanElement : DOMSVGTextPositioningElement
{
}

@end

@interface DOMSVGTextContentElement : DOMSVGElement <DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable>
{
}

@property(readonly, retain) DOMSVGAnimatedLength *textLength;
@property(readonly, retain) DOMSVGAnimatedEnumeration *lengthAdjust;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
- (int)getNumberOfChars;
- (float)getComputedTextLength;
- (float)getSubStringLength:(unsigned int)arg1 length:(unsigned int)arg2;
- (id)getStartPositionOfChar:(unsigned int)arg1;
- (id)getEndPositionOfChar:(unsigned int)arg1;
- (id)getExtentOfChar:(unsigned int)arg1;
- (float)getRotationOfChar:(unsigned int)arg1;
- (int)getCharNumAtPosition:(id)arg1;
- (void)selectSubString:(unsigned int)arg1 length:(unsigned int)arg2;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;

@end

@interface DOMSVGTextElement : DOMSVGTextPositioningElement <DOMSVGTransformable>
{
}

@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGTextPathElement : DOMSVGTextContentElement <DOMSVGURIReference>
{
}

@property(readonly, retain) DOMSVGAnimatedLength *startOffset;
@property(readonly, retain) DOMSVGAnimatedEnumeration *method;
@property(readonly, retain) DOMSVGAnimatedEnumeration *spacing;
@property(readonly, retain) DOMSVGAnimatedString *href;

@end

@interface DOMSVGTextPositioningElement : DOMSVGTextContentElement
{
}

@property(readonly, retain) DOMSVGAnimatedLengthList *x;
@property(readonly, retain) DOMSVGAnimatedLengthList *y;
@property(readonly, retain) DOMSVGAnimatedLengthList *dx;
@property(readonly, retain) DOMSVGAnimatedLengthList *dy;
@property(readonly, retain) DOMSVGAnimatedNumberList *rotate;

@end

@interface DOMSVGTitleElement : DOMSVGElement <DOMSVGLangSpace, DOMSVGStylable>
{
}

@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
- (id)getPresentationAttribute:(id)arg1;

@end

@interface DOMSVGTransform : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned short type;
@property(readonly, retain) DOMSVGMatrix *matrix;
@property(readonly) float angle;
- (void)setMatrix:(id)arg1;
- (void)setTranslate:(float)arg1 ty:(float)arg2;
- (void)setScale:(float)arg1 sy:(float)arg2;
- (void)setRotate:(float)arg1 cx:(float)arg2 cy:(float)arg3;
- (void)setSkewX:(float)arg1;
- (void)setSkewY:(float)arg1;

@end

@interface DOMSVGTransformList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned int numberOfItems;
- (void)clear;
- (id)initialize:(id)arg1;
- (id)getItem:(unsigned int)arg1;
- (id)insertItemBefore:(id)arg1 index:(unsigned int)arg2;
- (id)replaceItem:(id)arg1 index:(unsigned int)arg2;
- (id)removeItem:(unsigned int)arg1;
- (id)appendItem:(id)arg1;
- (id)createSVGTransformFromMatrix:(id)arg1;
- (id)consolidate;

@end

@interface DOMSVGUnitTypes : DOMObject
{
}

- (void)dealloc;
- (void)finalize;

@end

@interface DOMSVGUseElement : DOMSVGElement <DOMSVGURIReference, DOMSVGTests, DOMSVGLangSpace, DOMSVGExternalResourcesRequired, DOMSVGStylable, DOMSVGTransformable>
{
}

@property(readonly, retain) DOMSVGAnimatedLength *x;
@property(readonly, retain) DOMSVGAnimatedLength *y;
@property(readonly, retain) DOMSVGAnimatedLength *width;
@property(readonly, retain) DOMSVGAnimatedLength *height;
@property(readonly, retain) DOMSVGElementInstance *instanceRoot;
@property(readonly, retain) DOMSVGElementInstance *animatedInstanceRoot;
@property(readonly, retain) DOMSVGAnimatedString *href;
@property(readonly, retain) DOMSVGStringList *requiredFeatures;
@property(readonly, retain) DOMSVGStringList *requiredExtensions;
@property(readonly, retain) DOMSVGStringList *systemLanguage;
@property(copy) NSString *xmllang;
@property(copy) NSString *xmlspace;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedString *className;
@property(readonly, retain) DOMCSSStyleDeclaration *style;
@property(readonly, retain) DOMSVGAnimatedTransformList *transform;
@property(readonly, retain) DOMSVGElement *nearestViewportElement;
@property(readonly, retain) DOMSVGElement *farthestViewportElement;
- (BOOL)hasExtension:(id)arg1;
- (id)getPresentationAttribute:(id)arg1;
- (id)getBBox;
- (id)getCTM;
- (id)getScreenCTM;
- (id)getTransformToElement:(id)arg1;

@end

@interface DOMSVGViewElement : DOMSVGElement <DOMSVGExternalResourcesRequired, DOMSVGFitToViewBox, DOMSVGZoomAndPan>
{
}

@property(readonly, retain) DOMSVGStringList *viewTarget;
@property(readonly, retain) DOMSVGAnimatedBoolean *externalResourcesRequired;
@property(readonly, retain) DOMSVGAnimatedRect *viewBox;
@property(readonly, retain) DOMSVGAnimatedPreserveAspectRatio *preserveAspectRatio;
@property unsigned short zoomAndPan;

@end

@interface DOMSVGZoomEvent : DOMUIEvent
{
}

@property(readonly, retain) DOMSVGRect *zoomRectScreen;
@property(readonly) float previousScale;
@property(readonly, retain) DOMSVGPoint *previousTranslate;
@property(readonly) float newScale;
@property(readonly, retain) DOMSVGPoint *newTranslate;

@end

@interface DOMStyleSheet : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, copy) NSString *type;
@property BOOL disabled;
@property(readonly, retain) DOMNode *ownerNode;
@property(readonly, retain) DOMStyleSheet *parentStyleSheet;
@property(readonly, copy) NSString *href;
@property(readonly, copy) NSString *title;
@property(readonly, retain) DOMMediaList *media;

@end

@interface DOMStyleSheetList : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned int length;
- (id)item:(unsigned int)arg1;

@end

@interface DOMText : DOMCharacterData
{
}

@property(readonly, copy) NSString *wholeText;
- (id)splitText:(unsigned int)arg1;
- (id)replaceWholeText:(id)arg1;

@end

@interface DOMTextEvent : DOMUIEvent
{
}

@property(readonly, copy) NSString *data;
- (void)initTextEvent:(id)arg1 canBubbleArg:(BOOL)arg2 cancelableArg:(BOOL)arg3 viewArg:(id)arg4 dataArg:(id)arg5;

@end

@interface DOMTreeWalker : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly, retain) DOMNode *root;
@property(readonly) unsigned int whatToShow;
@property(readonly, retain) id <DOMNodeFilter> filter;
@property(readonly) BOOL expandEntityReferences;
@property(retain) DOMNode *currentNode;
- (id)parentNode;
- (id)firstChild;
- (id)lastChild;
- (id)previousSibling;
- (id)nextSibling;
- (id)previousNode;
- (id)nextNode;

@end

@interface DOMUIEvent : DOMEvent
{
}

@property(readonly, retain) DOMAbstractView *view;
@property(readonly) int detail;
@property(readonly) int keyCode;
@property(readonly) int charCode;
@property(readonly) int layerX;
@property(readonly) int layerY;
@property(readonly) int pageX;
@property(readonly) int pageY;
@property(readonly) int which;
- (void)initUIEvent:(id)arg1 canBubble:(BOOL)arg2 cancelable:(BOOL)arg3 view:(id)arg4 detail:(int)arg5;
- (void)initUIEvent:(id)arg1:(BOOL)arg2:(BOOL)arg3:(id)arg4:(int)arg5;

@end

@interface DOMWebKitAnimationEvent : DOMEvent
{
}

@property(readonly, copy) NSString *animationName;
@property(readonly) double elapsedTime;
- (void)initWebKitAnimationEvent:(id)arg1 canBubbleArg:(BOOL)arg2 cancelableArg:(BOOL)arg3 animationNameArg:(id)arg4 elapsedTimeArg:(double)arg5;

@end

@interface DOMWebKitCSSKeyframeRule : DOMCSSRule
{
}

@property(copy) NSString *keyText;
@property(readonly, retain) DOMCSSStyleDeclaration *style;

@end

@interface DOMWebKitCSSKeyframesRule : DOMCSSRule
{
}

@property(copy) NSString *name;
@property(readonly, retain) DOMCSSRuleList *cssRules;
- (void)insertRule:(id)arg1;
- (void)deleteRule:(id)arg1;
- (id)findRule:(id)arg1;

@end

@interface DOMWebKitCSSMatrix : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property double a;
@property double b;
@property double c;
@property double d;
@property double e;
@property double f;
@property double m11;
@property double m12;
@property double m13;
@property double m14;
@property double m21;
@property double m22;
@property double m23;
@property double m24;
@property double m31;
@property double m32;
@property double m33;
@property double m34;
@property double m41;
@property double m42;
@property double m43;
@property double m44;
- (void)setMatrixValue:(id)arg1;
- (id)multiply:(id)arg1;
- (id)inverse;
- (id)translate:(double)arg1 y:(double)arg2 z:(double)arg3;
- (id)scale:(double)arg1 scaleY:(double)arg2 scaleZ:(double)arg3;
- (id)rotate:(double)arg1 rotY:(double)arg2 rotZ:(double)arg3;
- (id)rotateAxisAngle:(double)arg1 y:(double)arg2 z:(double)arg3 angle:(double)arg4;
- (id)toString;

@end

@interface DOMWebKitCSSTransformValue : DOMCSSValueList
{
}

@property(readonly) unsigned short operationType;

@end

@interface DOMWebKitTransitionEvent : DOMEvent
{
}

@property(readonly, copy) NSString *propertyName;
@property(readonly) double elapsedTime;
- (void)initWebKitTransitionEvent:(id)arg1 canBubbleArg:(BOOL)arg2 cancelableArg:(BOOL)arg3 propertyNameArg:(id)arg4 elapsedTimeArg:(double)arg5;

@end

@interface DOMWheelEvent : DOMUIEvent
{
}

@property(readonly) int screenX;
@property(readonly) int screenY;
@property(readonly) int clientX;
@property(readonly) int clientY;
@property(readonly) BOOL ctrlKey;
@property(readonly) BOOL shiftKey;
@property(readonly) BOOL altKey;
@property(readonly) BOOL metaKey;
@property(readonly) int wheelDelta;
@property(readonly) int wheelDeltaX;
@property(readonly) int wheelDeltaY;
@property(readonly) int offsetX;
@property(readonly) int offsetY;
@property(readonly) int x;
@property(readonly) int y;
@property(readonly) BOOL isHorizontal;
- (void)initWheelEvent:(int)arg1 wheelDeltaY:(int)arg2 view:(id)arg3 screenX:(int)arg4 screenY:(int)arg5 clientX:(int)arg6 clientY:(int)arg7 ctrlKey:(BOOL)arg8 altKey:(BOOL)arg9 shiftKey:(BOOL)arg10 metaKey:(BOOL)arg11;

@end

@interface DOMNativeXPathNSResolver : DOMObject <DOMXPathNSResolver>
{
}

- (void)dealloc;
- (void)finalize;
- (id)lookupNamespaceURI:(id)arg1;

@end

@interface DOMXPathExpression : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
- (id)evaluate:(id)arg1 type:(unsigned short)arg2 inResult:(id)arg3;
- (id)evaluate:(id)arg1:(unsigned short)arg2:(id)arg3;

@end

@interface DOMXPathResult : DOMObject
{
}

- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned short resultType;
@property(readonly) double numberValue;
@property(readonly, copy) NSString *stringValue;
@property(readonly) BOOL booleanValue;
@property(readonly, retain) DOMNode *singleNodeValue;
@property(readonly) BOOL invalidIteratorState;
@property(readonly) unsigned int snapshotLength;
- (id)iterateNext;
- (id)snapshotItem:(unsigned int)arg1;

@end

@interface WebAnimationDelegate : NSObject
{
    struct GraphicsLayerCA *m_graphicsLayer;
}

- (void)animationDidStart:(id)arg1;
- (struct GraphicsLayerCA *)graphicsLayer;
- (void)setLayer:(struct GraphicsLayerCA *)arg1;

@end

@interface WebCoreBundleFinder : NSObject
{
}

@end

@interface WebCoreMovieObserver : NSObject
{
    struct MediaPlayerPrivate {
        void **;
        struct MediaPlayer *;
        struct RetainPtr<QTMovie>;
        struct RetainPtr<QTMovieView>;
        struct RetainPtr<QTVideoRendererWebKitOnly>;
        struct RetainPtr<WebCoreMovieObserver>;
        float;
        Timer_78f4896c;
        int;
        int;
        _Bool;
        _Bool;
        _Bool;
        struct IntRect;
        struct FloatSize;
        unsigned int;
        unsigned int;
        _Bool;
        float;
        float;
        float;
        struct RetainPtr<QTMovieLayer>;
    } *m_callback;
    NSView *m_view;
    BOOL m_delayCallbacks;
}

- (id)initWithCallback:(struct MediaPlayerPrivate *)arg1;
- (void)disconnect;
- (id)menuForEventDelegate:(id)arg1;
- (void)setView:(id)arg1;
- (void)repaint;
- (void)loadStateChanged:(id)arg1;
- (void)rateChanged:(id)arg1;
- (void)sizeChanged:(id)arg1;
- (void)timeChanged:(id)arg1;
- (void)didEnd:(id)arg1;
- (void)newImageAvailable:(id)arg1;
- (void)setDelayCallbacks:(BOOL)arg1;

@end

@interface WebCoreRenderThemeNotificationObserver : NSObject
{
    struct RenderTheme *_theme;
}

- (id)initWithTheme:(struct RenderTheme *)arg1;
- (void)systemColorsDidChange:(id)arg1;

@end

@interface WebCoreSynchronousLoader : NSObject
{
    NSURL *m_url;
    NSString *m_user;
    NSString *m_pass;
    struct Credential m_initialCredential;
    BOOL m_allowStoredCredentials;
    NSURLResponse *m_response;
    NSMutableData *m_data;
    NSError *m_error;
    BOOL m_isDone;
}

+ (id)loadRequest:(id)arg1 allowStoredCredentials:(BOOL)arg2 returningResponse:(id *)arg3 error:(id *)arg4;
- (BOOL)_isDone;
- (void)dealloc;
- (id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (BOOL)connectionShouldUseCredentialStorage:(id)arg1;
- (void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (id)_data;
- (id)_response;
- (id)_error;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface WebCoreResourceHandleAsDelegate : NSObject <NSURLAuthenticationChallengeSender>
{
    struct ResourceHandle *m_handle;
}

- (id)initWithHandle:(struct ResourceHandle *)arg1;
- (void)detachHandle;
- (id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (BOOL)connectionShouldUseCredentialStorage:(id)arg1;
- (void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (void)connection:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2 lengthReceived:(long long)arg3;
- (void)connection:(id)arg1 willStopBufferingData:(id)arg2;
- (void)connection:(id)arg1 didSendBodyData:(long long)arg2 totalBytesWritten:(long long)arg3 totalBytesExpectedToWrite:(long long)arg4;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (id)connection:(id)arg1 willCacheResponse:(id)arg2;
- (void)useCredential:(id)arg1 forAuthenticationChallenge:(id)arg2;
- (void)continueWithoutCredentialForAuthenticationChallenge:(id)arg1;
- (void)cancelAuthenticationChallenge:(id)arg1;

@end

@interface ScrollbarPrefsObserver : NSObject
{
}

+ (void)appearancePrefsChanged:(id)arg1;
+ (void)behaviorPrefsChanged:(id)arg1;
+ (void)registerAsObserver;

@end

@interface WebCoreSharedBufferData : NSData
{
    struct RefPtr<WebCore::SharedBuffer> sharedBuffer;
}

+ (void)initialize;
- (void)dealloc;
- (void)finalize;
- (id)initWithSharedBuffer:(struct SharedBuffer *)arg1;
- (unsigned long long)length;
- (const void *)bytes;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface WebCorePowerNotifier : NSObject
{
}

- (id)init;
- (void)didWake:(id)arg1;

@end

@interface WebCoreKeyGenerator : NSObject
{
}

+ (id)sharedGenerator;
- (id)init;
- (id)strengthMenuItemTitles;
- (id)signedPublicKeyAndChallengeStringWithStrengthIndex:(unsigned int)arg1 challenge:(id)arg2 pageURL:(id)arg3;

@end

@interface WebCoreViewFactory : NSObject
{
}

+ (id)sharedFactory;
- (id)init;

@end

@interface WebDashboardRegion : NSObject <NSCopying>
{
    struct CGRect rect;
    struct CGRect clip;
    int type;
}

- (id)initWithRect:(struct CGRect)arg1 clip:(struct CGRect)arg2 type:(int)arg3;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct CGRect)dashboardRegionClip;
- (struct CGRect)dashboardRegionRect;
- (int)dashboardRegionType;
- (id)description;
- (BOOL)isEqual:(id)arg1;

@end

@interface WebFontCache : NSObject
{
}

+ (void)getTraits:(Vector_c63bd660 *)arg1 inFamily:(id)arg2;
+ (id)internalFontWithFamily:(id)arg1 traits:(unsigned long long)arg2 weight:(int)arg3 size:(float)arg4;
+ (id)fontWithFamily:(id)arg1 traits:(unsigned long long)arg2 weight:(int)arg3 size:(float)arg4;
+ (id)fontWithFamily:(id)arg1 traits:(unsigned long long)arg2 size:(float)arg3;

@end

@interface WebLayer : CALayer
{
    struct GraphicsLayer *m_layerOwner;
}

+ (void)drawContents:(struct GraphicsLayer *)arg1 ofLayer:(id)arg2 intoContext:(struct CGContext *)arg3;
- (id)actionForKey:(id)arg1;
- (id)initWithLayer:(id)arg1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect)arg1;
- (void)drawInContext:(struct CGContext *)arg1;

@end

@interface WebUndefined : NSObject <NSCoding, NSCopying>
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)undefined;
- (id)description;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)retain;
- (void)release;
- (unsigned long long)retainCount;
- (id)autorelease;
- (void)dealloc;

@end

@interface WebScriptObject : NSObject
{
    WebScriptObjectPrivate *_private;
}

+ (void)initialize;
+ (id)scriptObjectForJSObject:(struct OpaqueJSValue *)arg1 originRootObject:(struct RootObject *)arg2 rootObject:(struct RootObject *)arg3;
+ (BOOL)throwException:(id)arg1;
+ (id)_convertValueToObjcValue:(struct JSValue)arg1 originRootObject:(struct RootObject *)arg2 rootObject:(struct RootObject *)arg3;
- (void)_setImp:(struct JSObject *)arg1 originRootObject:(PassRefPtr_8e019d1c)arg2 rootObject:(PassRefPtr_8e019d1c)arg3;
- (void)_setOriginRootObject:(PassRefPtr_8e019d1c)arg1 andRootObject:(PassRefPtr_8e019d1c)arg2;
- (id)_initWithJSObject:(struct JSObject *)arg1 originRootObject:(PassRefPtr_8e019d1c)arg2 rootObject:(PassRefPtr_8e019d1c)arg3;
- (struct JSObject *)_imp;
- (BOOL)_hasImp;
- (struct RootObject *)_rootObject;
- (struct RootObject *)_originRootObject;
- (BOOL)_isSafeScript;
- (void)dealloc;
- (void)finalize;
- (id)callWebScriptMethod:(id)arg1 withArguments:(id)arg2;
- (id)evaluateWebScript:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)valueForKey:(id)arg1;
- (void)removeWebScriptKey:(id)arg1;
- (id)stringRepresentation;
- (id)webScriptValueAtIndex:(unsigned int)arg1;
- (void)setWebScriptValueAtIndex:(unsigned int)arg1 value:(id)arg2;
- (void)setException:(id)arg1;
- (struct OpaqueJSValue *)JSObject;

@end

@interface WebScriptObjectPrivate : NSObject
{
    struct JSObject *imp;
    struct RootObject *rootObject;
    struct RootObject *originRootObject;
    BOOL isCreatedByDOMWrapper;
}

@end

@interface WebTiledLayer : CATiledLayer
{
    struct GraphicsLayer *m_layerOwner;
}

+ (double)fadeDuration;
+ (BOOL)shouldDrawOnMainThread;
- (id)actionForKey:(id)arg1;
- (id)initWithLayer:(id)arg1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect)arg1;
- (void)drawInContext:(struct CGContext *)arg1;

@end

@interface AccessibilityObjectWrapper : NSObject
{
    struct AccessibilityObject *m_object;
}

+ (void)initialize;
- (id)initWithAccessibilityObject:(struct AccessibilityObject *)arg1;
- (void)unregisterUniqueIdForUIElement;
- (void)detach;
- (struct AccessibilityObject *)accessibilityObject;
- (id)attachmentView;
- (id)doAXAttributedStringForTextMarkerRange:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (struct VisiblePositionRange)visiblePositionRangeForTextMarkerRange:(id)arg1;
- (id)renderWidgetChildren;
- (id)textMarkerRangeForSelection;
- (id)position;
- (id)role;
- (id)subrole;
- (id)roleDescription;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityParameterizedAttributeNames;
- (void)accessibilityPerformPressAction;
- (void)accessibilityPerformShowMenuAction;
- (void)accessibilityShowContextMenu;
- (void)accessibilityPerformAction:(id)arg1;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;
- (id)_accessibilityParentForSubview:(id)arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (id)doAXAttributedStringForRange:(struct _NSRange)arg1;
- (id)doAXRTFForRange:(struct _NSRange)arg1;
- (id)accessibilityAttributeValue:(id)arg1 forParameter:(id)arg2;
- (BOOL)accessibilityShouldUseUniqueId;
- (unsigned long long)accessibilityIndexOfChild:(id)arg1;
- (unsigned long long)accessibilityArrayAttributeCount:(id)arg1;
- (id)accessibilityArrayAttributeValues:(id)arg1 index:(unsigned long long)arg2 maxCount:(unsigned long long)arg3;

@end

@interface DOMRange (WebPrivate)
- (id)description;
- (id)_text;
@end

@interface DOMElement (WebPrivate)
- (id)_font;
- (id)_imageTIFFRepresentation;
- (id)_getURLAttribute:(id)arg1;
- (BOOL)isFocused;
@end

@interface DOMElement (DOMElementAppKitExtensions)
- (id)image;
@end

@interface DOMRange (DOMRangeExtensions)
- (struct CGRect)boundingBox;
- (id)textRects;
- (id)lineBoxRects;
@end

@interface DOMNode (DOMNodeExtensionsPendingPublic)
- (id)renderedImage;
@end

@interface DOMNode (DOMNodeExtensions)
- (struct CGRect)boundingBox;
- (id)textRects;
- (id)lineBoxRects;
@end

@interface DOMNode (WebCoreInternal)
- (id)description;
- (struct RootObject *)_rootObject;
@end

@interface DOMAbstractView (Frame)
- (void)_disconnectFrame;
@end

@interface DOMCSSStyleDeclaration (DOMCSS2Properties)
- (id)azimuth;
- (void)setAzimuth:(id)arg1;
- (id)background;
- (void)setBackground:(id)arg1;
- (id)backgroundAttachment;
- (void)setBackgroundAttachment:(id)arg1;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)arg1;
- (id)backgroundImage;
- (void)setBackgroundImage:(id)arg1;
- (id)backgroundPosition;
- (void)setBackgroundPosition:(id)arg1;
- (id)backgroundRepeat;
- (void)setBackgroundRepeat:(id)arg1;
- (id)border;
- (void)setBorder:(id)arg1;
- (id)borderCollapse;
- (void)setBorderCollapse:(id)arg1;
- (id)borderColor;
- (void)setBorderColor:(id)arg1;
- (id)borderSpacing;
- (void)setBorderSpacing:(id)arg1;
- (id)borderStyle;
- (void)setBorderStyle:(id)arg1;
- (id)borderTop;
- (void)setBorderTop:(id)arg1;
- (id)borderRight;
- (void)setBorderRight:(id)arg1;
- (id)borderBottom;
- (void)setBorderBottom:(id)arg1;
- (id)borderLeft;
- (void)setBorderLeft:(id)arg1;
- (id)borderTopColor;
- (void)setBorderTopColor:(id)arg1;
- (id)borderRightColor;
- (void)setBorderRightColor:(id)arg1;
- (id)borderBottomColor;
- (void)setBorderBottomColor:(id)arg1;
- (id)borderLeftColor;
- (void)setBorderLeftColor:(id)arg1;
- (id)borderTopStyle;
- (void)setBorderTopStyle:(id)arg1;
- (id)borderRightStyle;
- (void)setBorderRightStyle:(id)arg1;
- (id)borderBottomStyle;
- (void)setBorderBottomStyle:(id)arg1;
- (id)borderLeftStyle;
- (void)setBorderLeftStyle:(id)arg1;
- (id)borderTopWidth;
- (void)setBorderTopWidth:(id)arg1;
- (id)borderRightWidth;
- (void)setBorderRightWidth:(id)arg1;
- (id)borderBottomWidth;
- (void)setBorderBottomWidth:(id)arg1;
- (id)borderLeftWidth;
- (void)setBorderLeftWidth:(id)arg1;
- (id)borderWidth;
- (void)setBorderWidth:(id)arg1;
- (id)bottom;
- (void)setBottom:(id)arg1;
- (id)captionSide;
- (void)setCaptionSide:(id)arg1;
- (id)clear;
- (void)setClear:(id)arg1;
- (id)clip;
- (void)setClip:(id)arg1;
- (id)color;
- (void)setColor:(id)arg1;
- (id)content;
- (void)setContent:(id)arg1;
- (id)counterIncrement;
- (void)setCounterIncrement:(id)arg1;
- (id)counterReset;
- (void)setCounterReset:(id)arg1;
- (id)cue;
- (void)setCue:(id)arg1;
- (id)cueAfter;
- (void)setCueAfter:(id)arg1;
- (id)cueBefore;
- (void)setCueBefore:(id)arg1;
- (id)cursor;
- (void)setCursor:(id)arg1;
- (id)direction;
- (void)setDirection:(id)arg1;
- (id)display;
- (void)setDisplay:(id)arg1;
- (id)elevation;
- (void)setElevation:(id)arg1;
- (id)emptyCells;
- (void)setEmptyCells:(id)arg1;
- (id)cssFloat;
- (void)setCssFloat:(id)arg1;
- (id)font;
- (void)setFont:(id)arg1;
- (id)fontFamily;
- (void)setFontFamily:(id)arg1;
- (id)fontSize;
- (void)setFontSize:(id)arg1;
- (id)fontSizeAdjust;
- (void)setFontSizeAdjust:(id)arg1;
- (id)_fontSizeDelta;
- (void)_setFontSizeDelta:(id)arg1;
- (id)fontStretch;
- (void)setFontStretch:(id)arg1;
- (id)fontStyle;
- (void)setFontStyle:(id)arg1;
- (id)fontVariant;
- (void)setFontVariant:(id)arg1;
- (id)fontWeight;
- (void)setFontWeight:(id)arg1;
- (id)height;
- (void)setHeight:(id)arg1;
- (id)left;
- (void)setLeft:(id)arg1;
- (id)letterSpacing;
- (void)setLetterSpacing:(id)arg1;
- (id)lineHeight;
- (void)setLineHeight:(id)arg1;
- (id)listStyle;
- (void)setListStyle:(id)arg1;
- (id)listStyleImage;
- (void)setListStyleImage:(id)arg1;
- (id)listStylePosition;
- (void)setListStylePosition:(id)arg1;
- (id)listStyleType;
- (void)setListStyleType:(id)arg1;
- (id)margin;
- (void)setMargin:(id)arg1;
- (id)marginTop;
- (void)setMarginTop:(id)arg1;
- (id)marginRight;
- (void)setMarginRight:(id)arg1;
- (id)marginBottom;
- (void)setMarginBottom:(id)arg1;
- (id)marginLeft;
- (void)setMarginLeft:(id)arg1;
- (id)markerOffset;
- (void)setMarkerOffset:(id)arg1;
- (id)marks;
- (void)setMarks:(id)arg1;
- (id)maxHeight;
- (void)setMaxHeight:(id)arg1;
- (id)maxWidth;
- (void)setMaxWidth:(id)arg1;
- (id)minHeight;
- (void)setMinHeight:(id)arg1;
- (id)minWidth;
- (void)setMinWidth:(id)arg1;
- (id)orphans;
- (void)setOrphans:(id)arg1;
- (id)outline;
- (void)setOutline:(id)arg1;
- (id)outlineColor;
- (void)setOutlineColor:(id)arg1;
- (id)outlineStyle;
- (void)setOutlineStyle:(id)arg1;
- (id)outlineWidth;
- (void)setOutlineWidth:(id)arg1;
- (id)overflow;
- (void)setOverflow:(id)arg1;
- (id)padding;
- (void)setPadding:(id)arg1;
- (id)paddingTop;
- (void)setPaddingTop:(id)arg1;
- (id)paddingRight;
- (void)setPaddingRight:(id)arg1;
- (id)paddingBottom;
- (void)setPaddingBottom:(id)arg1;
- (id)paddingLeft;
- (void)setPaddingLeft:(id)arg1;
- (id)page;
- (void)setPage:(id)arg1;
- (id)pageBreakAfter;
- (void)setPageBreakAfter:(id)arg1;
- (id)pageBreakBefore;
- (void)setPageBreakBefore:(id)arg1;
- (id)pageBreakInside;
- (void)setPageBreakInside:(id)arg1;
- (id)pause;
- (void)setPause:(id)arg1;
- (id)pauseAfter;
- (void)setPauseAfter:(id)arg1;
- (id)pauseBefore;
- (void)setPauseBefore:(id)arg1;
- (id)pitch;
- (void)setPitch:(id)arg1;
- (id)pitchRange;
- (void)setPitchRange:(id)arg1;
- (id)playDuring;
- (void)setPlayDuring:(id)arg1;
- (id)position;
- (void)setPosition:(id)arg1;
- (id)quotes;
- (void)setQuotes:(id)arg1;
- (id)richness;
- (void)setRichness:(id)arg1;
- (id)right;
- (void)setRight:(id)arg1;
- (id)size;
- (void)setSize:(id)arg1;
- (id)speak;
- (void)setSpeak:(id)arg1;
- (id)speakHeader;
- (void)setSpeakHeader:(id)arg1;
- (id)speakNumeral;
- (void)setSpeakNumeral:(id)arg1;
- (id)speakPunctuation;
- (void)setSpeakPunctuation:(id)arg1;
- (id)speechRate;
- (void)setSpeechRate:(id)arg1;
- (id)stress;
- (void)setStress:(id)arg1;
- (id)tableLayout;
- (void)setTableLayout:(id)arg1;
- (id)textAlign;
- (void)setTextAlign:(id)arg1;
- (id)textDecoration;
- (void)setTextDecoration:(id)arg1;
- (id)textIndent;
- (void)setTextIndent:(id)arg1;
- (id)textShadow;
- (void)setTextShadow:(id)arg1;
- (id)textTransform;
- (void)setTextTransform:(id)arg1;
- (id)top;
- (void)setTop:(id)arg1;
- (id)unicodeBidi;
- (void)setUnicodeBidi:(id)arg1;
- (id)verticalAlign;
- (void)setVerticalAlign:(id)arg1;
- (id)visibility;
- (void)setVisibility:(id)arg1;
- (id)voiceFamily;
- (void)setVoiceFamily:(id)arg1;
- (id)volume;
- (void)setVolume:(id)arg1;
- (id)whiteSpace;
- (void)setWhiteSpace:(id)arg1;
- (id)widows;
- (void)setWidows:(id)arg1;
- (id)width;
- (void)setWidth:(id)arg1;
- (id)wordSpacing;
- (void)setWordSpacing:(id)arg1;
- (id)zIndex;
- (void)setZIndex:(id)arg1;
@end

@interface DOMHTMLTextAreaElement (FormPromptAdditions)
- (BOOL)_isEdited;
@end

@interface DOMHTMLInputElement (FormPromptAdditions)
- (BOOL)_isEdited;
@end

@interface DOMHTMLSelectElement (FormAutoFillTransition)
- (void)_activateItemAtIndex:(int)arg1;
@end

@interface DOMHTMLInputElement (FormAutoFillTransition)
- (BOOL)_isTextField;
- (struct CGRect)_rectOnScreen;
- (void)_replaceCharactersInRange:(struct _NSRange)arg1 withString:(id)arg2 selectingFromIndex:(int)arg3;
- (struct _NSRange)_selectedRange;
- (void)_setAutofilled:(BOOL)arg1;
@end

@interface DOMHTMLDocument (WebPrivate)
- (id)_createDocumentFragmentWithMarkupString:(id)arg1 baseURLString:(id)arg2;
- (id)_createDocumentFragmentWithText:(id)arg1;
@end

@interface DOMHTMLDocument (DOMHTMLDocumentExtensions)
- (id)createDocumentFragmentWithMarkupString:(id)arg1 baseURL:(id)arg2;
- (id)createDocumentFragmentWithText:(id)arg1;
@end

@interface WebScriptObject (WebScriptObjectInternal)
- (id)_init;
- (void)_initializeScriptDOMNodeImp;
@end

@interface DOMObject (DOMLinkStyle)
@property(readonly, retain) DOMStyleSheet *sheet;
@end

@interface DOMRGBColor (WebPrivate)
- (id)_color;
@end

@interface NSURLResponse (WebCoreURLResponse)
- (void)adjustMIMETypeIfNecessary;
@end

@interface NSScrollView (WebCoreView)
- (id)_webcore_effectiveFirstResponder;
@end

@interface NSClipView (WebCoreView)
- (id)_webcore_effectiveFirstResponder;
@end

@interface NSView (WebCoreView)
- (id)_webcore_effectiveFirstResponder;
@end

@interface WebLayer (WebLayerAdditions)
- (void)setLayerOwner:(struct GraphicsLayer *)arg1;
- (struct GraphicsLayer *)layerOwner;
@end

@interface WebScriptObject (WebKitCocoaBindings)
- (id)objectAtIndex:(unsigned int)arg1;
@end

@interface WebTiledLayer (LayerMacAdditions)
- (void)setLayerOwner:(struct GraphicsLayer *)arg1;
- (struct GraphicsLayer *)layerOwner;
@end

